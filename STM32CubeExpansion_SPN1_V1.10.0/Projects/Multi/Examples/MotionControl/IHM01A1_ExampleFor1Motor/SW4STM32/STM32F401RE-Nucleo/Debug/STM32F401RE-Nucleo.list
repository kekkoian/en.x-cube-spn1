
STM32F401RE-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000170  20000000  08005f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d4  20000170  0800610c  00020170  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000344  0800610c  00020344  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 10 .debug_info   000160fb  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002742  00000000  00000000  0003629b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010b0  00000000  00000000  000389e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001000  00000000  00000000  00039a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000040d2  00000000  00000000  0003aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010629  00000000  00000000  0003eb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008fd70  00000000  00000000  0004f18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000deefb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004608  00000000  00000000  000def50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000170 	.word	0x20000170
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005f5c 	.word	0x08005f5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000174 	.word	0x20000174
 80001d0:	08005f5c 	.word	0x08005f5c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <L6474_AttachErrorHandler+0x1c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000284 	.word	0x20000284

080004ec <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <L6474_AttachFlagInterrupt+0x1c>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6013      	str	r3, [r2, #0]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000288 	.word	0x20000288

0800050c <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	21a8      	movs	r1, #168	; 0xa8
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fb16 	bl	8001b4c <L6474_SendCommand>
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	21b8      	movs	r1, #184	; 0xb8
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fb08 	bl	8001b4c <L6474_SendCommand>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000554:	4b71      	ldr	r3, [pc, #452]	; (800071c <L6474_CmdGetParam+0x1d8>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	b2db      	uxtb	r3, r3
 8000560:	3b01      	subs	r3, #1
 8000562:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000564:	2300      	movs	r3, #0
 8000566:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000568:	4b6d      	ldr	r3, [pc, #436]	; (8000720 <L6474_CmdGetParam+0x1dc>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800056e:	7cbb      	ldrb	r3, [r7, #18]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d003      	beq.n	800057c <L6474_CmdGetParam+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000574:	f002 fa0c 	bl	8002990 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8000578:	2300      	movs	r3, #0
 800057a:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	e02b      	b.n	80005da <L6474_CmdGetParam+0x96>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000582:	4a68      	ldr	r2, [pc, #416]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	4413      	add	r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 800058c:	4a65      	ldr	r2, [pc, #404]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4413      	add	r3, r2
 8000592:	3303      	adds	r3, #3
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000598:	4a62      	ldr	r2, [pc, #392]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	4413      	add	r3, r2
 800059e:	3306      	adds	r3, #6
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80005a4:	4a5f      	ldr	r2, [pc, #380]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	4413      	add	r3, r2
 80005aa:	3309      	adds	r3, #9
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 80005b0:	4a5d      	ldr	r2, [pc, #372]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	3303      	adds	r3, #3
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 80005bc:	4a5a      	ldr	r2, [pc, #360]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	4413      	add	r3, r2
 80005c2:	3306      	adds	r3, #6
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 80005c8:	4a57      	ldr	r2, [pc, #348]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	4413      	add	r3, r2
 80005ce:	3309      	adds	r3, #9
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3301      	adds	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	4b50      	ldr	r3, [pc, #320]	; (800071c <L6474_CmdGetParam+0x1d8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d3cc      	bcc.n	8000582 <L6474_CmdGetParam+0x3e>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	2b18      	cmp	r3, #24
 80005ee:	d84d      	bhi.n	800068c <L6474_CmdGetParam+0x148>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <L6474_CmdGetParam+0xb4>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	0800065d 	.word	0x0800065d
 80005fc:	08000673 	.word	0x08000673
 8000600:	0800065d 	.word	0x0800065d
 8000604:	0800068d 	.word	0x0800068d
 8000608:	0800068d 	.word	0x0800068d
 800060c:	0800068d 	.word	0x0800068d
 8000610:	0800068d 	.word	0x0800068d
 8000614:	0800068d 	.word	0x0800068d
 8000618:	0800068d 	.word	0x0800068d
 800061c:	0800068d 	.word	0x0800068d
 8000620:	0800068d 	.word	0x0800068d
 8000624:	0800068d 	.word	0x0800068d
 8000628:	0800068d 	.word	0x0800068d
 800062c:	0800068d 	.word	0x0800068d
 8000630:	0800068d 	.word	0x0800068d
 8000634:	0800068d 	.word	0x0800068d
 8000638:	0800068d 	.word	0x0800068d
 800063c:	0800068d 	.word	0x0800068d
 8000640:	0800068d 	.word	0x0800068d
 8000644:	0800068d 	.word	0x0800068d
 8000648:	0800068d 	.word	0x0800068d
 800064c:	0800068d 	.word	0x0800068d
 8000650:	0800068d 	.word	0x0800068d
 8000654:	08000673 	.word	0x08000673
 8000658:	08000673 	.word	0x08000673
    }
    switch (param)
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	7c7b      	ldrb	r3, [r7, #17]
 8000662:	f042 0220 	orr.w	r2, r2, #32
 8000666:	b2d1      	uxtb	r1, r2
 8000668:	4a2e      	ldr	r2, [pc, #184]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 800066a:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 800066c:	2303      	movs	r3, #3
 800066e:	74fb      	strb	r3, [r7, #19]
        break;
 8000670:	e018      	b.n	80006a4 <L6474_CmdGetParam+0x160>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	7c7b      	ldrb	r3, [r7, #17]
 8000678:	f042 0220 	orr.w	r2, r2, #32
 800067c:	b2d1      	uxtb	r1, r2
 800067e:	4a29      	ldr	r2, [pc, #164]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	74fb      	strb	r3, [r7, #19]
        break;
 800068a:	e00b      	b.n	80006a4 <L6474_CmdGetParam+0x160>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	7c7b      	ldrb	r3, [r7, #17]
 8000692:	f042 0220 	orr.w	r2, r2, #32
 8000696:	b2d1      	uxtb	r1, r2
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80006a4:	f002 f96b 	bl	800297e <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <L6474_CmdGetParam+0x1dc>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f47f af58 	bne.w	8000568 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80006b8:	7cfb      	ldrb	r3, [r7, #19]
 80006ba:	f1c3 0303 	rsb	r3, r3, #3
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e011      	b.n	80006e6 <L6474_CmdGetParam+0x1a2>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <L6474_CmdGetParam+0x1e0>)
 80006cc:	1898      	adds	r0, r3, r2
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 80006d8:	4413      	add	r3, r2
 80006da:	4619      	mov	r1, r3
 80006dc:	f002 f91e 	bl	800291c <L6474_WriteBytes>
       i++)
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3301      	adds	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d9ea      	bls.n	80006c2 <L6474_CmdGetParam+0x17e>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80006ec:	7c7b      	ldrb	r3, [r7, #17]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 80006f0:	4413      	add	r3, r2
 80006f2:	78db      	ldrb	r3, [r3, #3]
 80006f4:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 80006f6:	7c7a      	ldrb	r2, [r7, #17]
 80006f8:	490b      	ldr	r1, [pc, #44]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 80006fa:	440a      	add	r2, r1
 80006fc:	7992      	ldrb	r2, [r2, #6]
 80006fe:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000700:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8000702:	7c7a      	ldrb	r2, [r7, #17]
 8000704:	4908      	ldr	r1, [pc, #32]	; (8000728 <L6474_CmdGetParam+0x1e4>)
 8000706:	440a      	add	r2, r1
 8000708:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800070a:	4313      	orrs	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800070e:	f002 f93f 	bl	8002990 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000018c 	.word	0x2000018c
 8000720:	200001a8 	.word	0x200001a8
 8000724:	20000190 	.word	0x20000190
 8000728:	2000019c 	.word	0x2000019c

0800072c <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000736:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <L6474_CmdGetStatus+0xfc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8000746:	2300      	movs	r3, #0
 8000748:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <L6474_CmdGetStatus+0x100>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d003      	beq.n	800075e <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000756:	f002 f91b 	bl	8002990 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800075a:	2300      	movs	r3, #0
 800075c:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e01f      	b.n	80007a4 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8000764:	4a32      	ldr	r2, [pc, #200]	; (8000830 <L6474_CmdGetStatus+0x104>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 800076e:	4a30      	ldr	r2, [pc, #192]	; (8000830 <L6474_CmdGetStatus+0x104>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	3303      	adds	r3, #3
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 800077a:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <L6474_CmdGetStatus+0x104>)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	3306      	adds	r3, #6
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8000786:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <L6474_CmdGetStatus+0x108>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	3303      	adds	r3, #3
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 8000792:	4a28      	ldr	r2, [pc, #160]	; (8000834 <L6474_CmdGetStatus+0x108>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	3306      	adds	r3, #6
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <L6474_CmdGetStatus+0xfc>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d3d8      	bcc.n	8000764 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80007b2:	7abb      	ldrb	r3, [r7, #10]
 80007b4:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <L6474_CmdGetStatus+0x104>)
 80007b6:	21d0      	movs	r1, #208	; 0xd0
 80007b8:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80007ba:	f002 f8e0 	bl	800297e <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80007be:	2301      	movs	r3, #1
 80007c0:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <L6474_CmdGetStatus+0x100>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1be      	bne.n	800074a <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e011      	b.n	80007f6 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <L6474_CmdGetStatus+0x104>)
 80007dc:	1898      	adds	r0, r3, r2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <L6474_CmdGetStatus+0x108>)
 80007e8:	4413      	add	r3, r2
 80007ea:	4619      	mov	r1, r3
 80007ec:	f002 f896 	bl	800291c <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d9ea      	bls.n	80007d2 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 80007fc:	7abb      	ldrb	r3, [r7, #10]
 80007fe:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <L6474_CmdGetStatus+0x108>)
 8000800:	4413      	add	r3, r2
 8000802:	78db      	ldrb	r3, [r3, #3]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b21a      	sxth	r2, r3
 8000808:	7abb      	ldrb	r3, [r7, #10]
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <L6474_CmdGetStatus+0x108>)
 800080c:	440b      	add	r3, r1
 800080e:	799b      	ldrb	r3, [r3, #6]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000818:	f002 f8ba 	bl	8002990 <L6474_Board_EnableIrq>
  
  return (status);
 800081c:	893b      	ldrh	r3, [r7, #8]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000018c 	.word	0x2000018c
 800082c:	200001a8 	.word	0x200001a8
 8000830:	20000190 	.word	0x20000190
 8000834:	2000019c 	.word	0x2000019c

08000838 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f980 	bl	8001b4c <L6474_SendCommand>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000866:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <L6474_CmdSetParam+0x1b8>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b01      	subs	r3, #1
 8000874:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000876:	2300      	movs	r3, #0
 8000878:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 800087a:	4b65      	ldr	r3, [pc, #404]	; (8000a10 <L6474_CmdSetParam+0x1bc>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000880:	7cbb      	ldrb	r3, [r7, #18]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d003      	beq.n	800088e <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000886:	f002 f883 	bl	8002990 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800088a:	2300      	movs	r3, #0
 800088c:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e019      	b.n	80008c8 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000894:	4a5f      	ldr	r2, [pc, #380]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	4413      	add	r3, r2
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 800089e:	4a5d      	ldr	r2, [pc, #372]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	4413      	add	r3, r2
 80008a4:	3303      	adds	r3, #3
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80008aa:	4a5a      	ldr	r2, [pc, #360]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	4413      	add	r3, r2
 80008b0:	3306      	adds	r3, #6
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80008b6:	4a57      	ldr	r2, [pc, #348]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	4413      	add	r3, r2
 80008bc:	3309      	adds	r3, #9
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <L6474_CmdSetParam+0x1b8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d3de      	bcc.n	8000894 <L6474_CmdSetParam+0x40>
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3b01      	subs	r3, #1
 80008da:	2b17      	cmp	r3, #23
 80008dc:	d85c      	bhi.n	8000998 <L6474_CmdSetParam+0x144>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <L6474_CmdSetParam+0x90>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000945 	.word	0x08000945
 80008e8:	08000975 	.word	0x08000975
 80008ec:	08000945 	.word	0x08000945
 80008f0:	08000999 	.word	0x08000999
 80008f4:	08000999 	.word	0x08000999
 80008f8:	08000999 	.word	0x08000999
 80008fc:	08000999 	.word	0x08000999
 8000900:	08000999 	.word	0x08000999
 8000904:	08000999 	.word	0x08000999
 8000908:	08000999 	.word	0x08000999
 800090c:	08000999 	.word	0x08000999
 8000910:	08000999 	.word	0x08000999
 8000914:	08000999 	.word	0x08000999
 8000918:	08000999 	.word	0x08000999
 800091c:	08000999 	.word	0x08000999
 8000920:	08000999 	.word	0x08000999
 8000924:	08000999 	.word	0x08000999
 8000928:	08000999 	.word	0x08000999
 800092c:	08000999 	.word	0x08000999
 8000930:	08000999 	.word	0x08000999
 8000934:	08000999 	.word	0x08000999
 8000938:	08000999 	.word	0x08000999
 800093c:	08000999 	.word	0x08000999
 8000940:	08000975 	.word	0x08000975
    }
    switch (param)
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8000944:	7c7b      	ldrb	r3, [r7, #17]
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	b2d1      	uxtb	r1, r2
 800094a:	4a32      	ldr	r2, [pc, #200]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 800094c:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0c1a      	lsrs	r2, r3, #16
 8000952:	7c7b      	ldrb	r3, [r7, #17]
 8000954:	b2d1      	uxtb	r1, r2
 8000956:	4a2f      	ldr	r2, [pc, #188]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 8000958:	4413      	add	r3, r2
 800095a:	460a      	mov	r2, r1
 800095c:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0a1a      	lsrs	r2, r3, #8
 8000962:	7c7b      	ldrb	r3, [r7, #17]
 8000964:	b2d1      	uxtb	r1, r2
 8000966:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 800096e:	2303      	movs	r3, #3
 8000970:	74fb      	strb	r3, [r7, #19]
        break;
 8000972:	e01a      	b.n	80009aa <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8000974:	7c7b      	ldrb	r3, [r7, #17]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	b2d1      	uxtb	r1, r2
 800097a:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 800097c:	4413      	add	r3, r2
 800097e:	460a      	mov	r2, r1
 8000980:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	0a1a      	lsrs	r2, r3, #8
 8000986:	7c7b      	ldrb	r3, [r7, #17]
 8000988:	b2d1      	uxtb	r1, r2
 800098a:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 800098c:	4413      	add	r3, r2
 800098e:	460a      	mov	r2, r1
 8000990:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	74fb      	strb	r3, [r7, #19]
        break;
 8000996:	e008      	b.n	80009aa <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8000998:	7c7b      	ldrb	r3, [r7, #17]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	b2d1      	uxtb	r1, r2
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 80009a0:	4413      	add	r3, r2
 80009a2:	460a      	mov	r2, r1
 80009a4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80009aa:	7c7b      	ldrb	r3, [r7, #17]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	b2d1      	uxtb	r1, r2
 80009b0:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 80009b2:	4413      	add	r3, r2
 80009b4:	460a      	mov	r2, r1
 80009b6:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80009b8:	f001 ffe1 	bl	800297e <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80009bc:	2301      	movs	r3, #1
 80009be:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <L6474_CmdSetParam+0x1bc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f47f af57 	bne.w	800087a <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	f1c3 0303 	rsb	r3, r3, #3
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e011      	b.n	80009fa <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <L6474_CmdSetParam+0x1c0>)
 80009e0:	1898      	adds	r0, r3, r2
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <L6474_CmdSetParam+0x1c4>)
 80009ec:	4413      	add	r3, r2
 80009ee:	4619      	mov	r1, r3
 80009f0:	f001 ff94 	bl	800291c <L6474_WriteBytes>
       i++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d9ea      	bls.n	80009d6 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000a00:	f001 ffc6 	bl	8002990 <L6474_Board_EnableIrq>
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000018c 	.word	0x2000018c
 8000a10:	200001a8 	.word	0x200001a8
 8000a14:	20000190 	.word	0x20000190
 8000a18:	2000019c 	.word	0x2000019c

08000a1c <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <L6474_Init+0x94>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 ffba 	bl	80029a4 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8000a30:	f002 f9b8 	bl	8002da4 <L6474_Board_SpiInit>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8000a3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a3e:	f001 f859 	bl	8001af4 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <L6474_Init+0x94>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 f8d5 	bl	8002bf8 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <L6474_Init+0x94>)
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 f951 	bl	8002cfc <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f001 ff84 	bl	8002968 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d106      	bne.n	8000a74 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <L6474_Init+0x94>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 f963 	bl	8001d38 <L6474_SetDeviceParamsToPredefinedValues>
 8000a72:	e006      	b.n	8000a82 <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <L6474_Init+0x94>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 f8b7 	bl	8001bf0 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <L6474_Init+0x94>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd3f 	bl	800050c <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <L6474_Init+0x94>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe49 	bl	800072c <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <L6474_Init+0x94>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <L6474_Init+0x94>)
 8000aa4:	801a      	strh	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200001aa 	.word	0x200001aa

08000ab4 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <L6474_GetAcceleration+0x2c>)
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	3318      	adds	r3, #24
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	b29b      	uxth	r3, r3
}            
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2000020c 	.word	0x2000020c

08000ae4 <L6474_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param L6474 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float L6474_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue = L6474_CmdGetParam(deviceId, param);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fd25 	bl	8000544 <L6474_CmdGetParam>
 8000afa:	60b8      	str	r0, [r7, #8]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	2b12      	cmp	r3, #18
 8000b02:	d84b      	bhi.n	8000b9c <L6474_GetAnalogValue+0xb8>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <L6474_GetAnalogValue+0x28>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b59 	.word	0x08000b59
 8000b10:	08000b9d 	.word	0x08000b9d
 8000b14:	08000b59 	.word	0x08000b59
 8000b18:	08000b9d 	.word	0x08000b9d
 8000b1c:	08000b9d 	.word	0x08000b9d
 8000b20:	08000b9d 	.word	0x08000b9d
 8000b24:	08000b9d 	.word	0x08000b9d
 8000b28:	08000b9d 	.word	0x08000b9d
 8000b2c:	08000b6d 	.word	0x08000b6d
 8000b30:	08000b9d 	.word	0x08000b9d
 8000b34:	08000b9d 	.word	0x08000b9d
 8000b38:	08000b9d 	.word	0x08000b9d
 8000b3c:	08000b9d 	.word	0x08000b9d
 8000b40:	08000b9d 	.word	0x08000b9d
 8000b44:	08000b8d 	.word	0x08000b8d
 8000b48:	08000b8d 	.word	0x08000b8d
 8000b4c:	08000b9d 	.word	0x08000b9d
 8000b50:	08000b9d 	.word	0x08000b9d
 8000b54:	08000b7d 	.word	0x08000b7d
  float value;
  switch (param)
  {
    case L6474_ABS_POS:
    case L6474_MARK:
      value = (float) L6474_ConvertPosition(registerValue);
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f000 ffab 	bl	8001ab4 <L6474_ConvertPosition>
 8000b5e:	ee07 0a90 	vmov	s15, r0
 8000b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b66:	edc7 7a03 	vstr	s15, [r7, #12]
      break;
 8000b6a:	e01e      	b.n	8000baa <L6474_GetAnalogValue+0xc6>
    case L6474_TVAL:
      value = L6474_Tval_Par_to_Current(registerValue);    
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fe87 	bl	8002884 <L6474_Tval_Par_to_Current>
 8000b76:	ed87 0a03 	vstr	s0, [r7, #12]
      break;
 8000b7a:	e016      	b.n	8000baa <L6474_GetAnalogValue+0xc6>
    case L6474_OCD_TH:
      value = L6474_Ocd_Par_to_Th(registerValue);    
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fe43 	bl	800280c <L6474_Ocd_Par_to_Th>
 8000b86:	ed87 0a03 	vstr	s0, [r7, #12]
      break;      
 8000b8a:	e00e      	b.n	8000baa <L6474_GetAnalogValue+0xc6>
    case L6474_TON_MIN:
    case L6474_TOFF_MIN:
      value = L6474_Tmin_Par_to_Time(registerValue);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fe8f 	bl	80028b4 <L6474_Tmin_Par_to_Time>
 8000b96:	ed87 0a03 	vstr	s0, [r7, #12]
      break;          
 8000b9a:	e006      	b.n	8000baa <L6474_GetAnalogValue+0xc6>
    default:
      value = (float) registerValue;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	ee07 3a90 	vmov	s15, r3
 8000ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba6:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return value;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	ee07 3a90 	vmov	s15, r3
}
 8000bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop

08000bbc <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <L6474_GetCurrentSpeed+0x2c>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3320      	adds	r3, #32
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b29b      	uxth	r3, r3
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000020c 	.word	0x2000020c

08000bec <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <L6474_GetDeceleration+0x2c>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	440b      	add	r3, r1
 8000c04:	331a      	adds	r3, #26
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	b29b      	uxth	r3, r3
}          
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000020c 	.word	0x2000020c

08000c1c <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <L6474_GetDeviceState+0x2c>)
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	3324      	adds	r3, #36	; 0x24
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000020c 	.word	0x2000020c

08000c4c <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 8000c56:	79fa      	ldrb	r2, [r7, #7]
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <L6474_GetDirection+0x2c>)
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3323      	adds	r3, #35	; 0x23
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	2000020c 	.word	0x2000020c

08000c7c <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 8000c80:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <L6474_GetMotorHandle+0x10>)
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc46 	bl	8000544 <L6474_CmdGetParam>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fefa 	bl	8001ab4 <L6474_ConvertPosition>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8000cd6:	79fa      	ldrb	r2, [r7, #7]
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <L6474_GetMaxSpeed+0x2c>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	331c      	adds	r3, #28
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000020c 	.word	0x2000020c

08000cfc <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <L6474_GetMinSpeed+0x2c>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	331e      	adds	r3, #30
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
}                                                     
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000020c 	.word	0x2000020c

08000d2c <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <L6474_GetNbDevices+0x14>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	2000018c 	.word	0x2000018c

08000d44 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2101      	movs	r1, #1
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fbf6 	bl	8000544 <L6474_CmdGetParam>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 feaa 	bl	8001ab4 <L6474_ConvertPosition>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2116      	movs	r1, #22
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbe2 	bl	8000544 <L6474_CmdGetParam>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	3b08      	subs	r3, #8
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d81c      	bhi.n	8000dd2 <L6474_GetStepMode+0x66>
 8000d98:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <L6474_GetStepMode+0x34>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db5 	.word	0x08000db5
 8000da4:	08000dbb 	.word	0x08000dbb
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dc7 	.word	0x08000dc7
 8000db0:	08000dcd 	.word	0x08000dcd
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
      break;
 8000db8:	e00e      	b.n	8000dd8 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
      break;    
 8000dbe:	e00b      	b.n	8000dd8 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	73fb      	strb	r3, [r7, #15]
      break;        
 8000dc4:	e008      	b.n	8000dd8 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	73fb      	strb	r3, [r7, #15]
      break;       
 8000dca:	e005      	b.n	8000dd8 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	73fb      	strb	r3, [r7, #15]
      break;
 8000dd0:	e002      	b.n	8000dd8 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8000dd2:	23fe      	movs	r3, #254	; 0xfe
 8000dd4:	73fb      	strb	r3, [r7, #15]
      break;       
 8000dd6:	bf00      	nop
  }
  
  return stepMode;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop

08000de4 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8000dee:	79fa      	ldrb	r2, [r7, #7]
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <L6474_GetStopMode+0x2c>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3325      	adds	r3, #37	; 0x25
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000020c 	.word	0x2000020c

08000e14 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f81e 	bl	8000e64 <L6474_GoTo>
} 
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2103      	movs	r1, #3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fb80 	bl	8000544 <L6474_CmdGetParam>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fe34 	bl	8001ab4 <L6474_ConvertPosition>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f804 	bl	8000e64 <L6474_GoTo>
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	493a      	ldr	r1, [pc, #232]	; (8000f5c <L6474_GoTo+0xf8>)
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3324      	adds	r3, #36	; 0x24
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d003      	beq.n	8000e90 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f868 	bl	8000f60 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2101      	movs	r1, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fb55 	bl	8000544 <L6474_CmdGetParam>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	79fc      	ldrb	r4, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fe08 	bl	8001ab4 <L6474_ConvertPosition>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	492d      	ldr	r1, [pc, #180]	; (8000f5c <L6474_GoTo+0xf8>)
 8000ea8:	4623      	mov	r3, r4
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4423      	add	r3, r4
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	4928      	ldr	r1, [pc, #160]	; (8000f5c <L6474_GoTo+0xf8>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0c      	blt.n	8000eee <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	4820      	ldr	r0, [pc, #128]	; (8000f5c <L6474_GoTo+0xf8>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4403      	add	r3, r0
 8000ee4:	3314      	adds	r3, #20
 8000ee6:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e00d      	b.n	8000f0a <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	4919      	ldr	r1, [pc, #100]	; (8000f5c <L6474_GoTo+0xf8>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	3314      	adds	r3, #20
 8000f04:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d021      	beq.n	8000f54 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8000f10:	79fa      	ldrb	r2, [r7, #7]
 8000f12:	4912      	ldr	r1, [pc, #72]	; (8000f5c <L6474_GoTo+0xf8>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3322      	adds	r3, #34	; 0x22
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fb48 	bl	80015c0 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	490a      	ldr	r1, [pc, #40]	; (8000f5c <L6474_GoTo+0xf8>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3314      	adds	r3, #20
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fcf6 	bl	8001938 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f906 	bl	8002160 <L6474_StartMovement>
  }  
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	2000020c 	.word	0x2000020c

08000f60 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	4920      	ldr	r1, [pc, #128]	; (8000ff0 <L6474_HardStop+0x90>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	3325      	adds	r3, #37	; 0x25
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d12d      	bne.n	8000fde <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fe8f 	bl	8002ca8 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	4918      	ldr	r1, [pc, #96]	; (8000ff0 <L6474_HardStop+0x90>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3324      	adds	r3, #36	; 0x24
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8000f9e:	79fa      	ldrb	r2, [r7, #7]
 8000fa0:	4913      	ldr	r1, [pc, #76]	; (8000ff0 <L6474_HardStop+0x90>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	3322      	adds	r3, #34	; 0x22
 8000fae:	2203      	movs	r2, #3
 8000fb0:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <L6474_HardStop+0x90>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3314      	adds	r3, #20
 8000fc2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000fc6:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <L6474_HardStop+0x90>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	2200      	movs	r2, #0
 8000fda:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8000fdc:	e003      	b.n	8000fe6 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f807 	bl	8000ff4 <L6474_HizStop>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000020c 	.word	0x2000020c

08000ff4 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fe51 	bl	8002ca8 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa7f 	bl	800050c <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <L6474_HizStop+0x74>)
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	440b      	add	r3, r1
 800101c:	3324      	adds	r3, #36	; 0x24
 800101e:	2208      	movs	r2, #8
 8001020:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	4910      	ldr	r1, [pc, #64]	; (8001068 <L6474_HizStop+0x74>)
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	3322      	adds	r3, #34	; 0x22
 8001032:	2203      	movs	r2, #3
 8001034:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	490b      	ldr	r1, [pc, #44]	; (8001068 <L6474_HizStop+0x74>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	440b      	add	r3, r1
 8001044:	3314      	adds	r3, #20
 8001046:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800104a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	4906      	ldr	r1, [pc, #24]	; (8001068 <L6474_HizStop+0x74>)
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	3320      	adds	r3, #32
 800105c:	2200      	movs	r2, #0
 800105e:	801a      	strh	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000020c 	.word	0x2000020c

0800106c <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	460b      	mov	r3, r1
 800107a:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	4926      	ldr	r1, [pc, #152]	; (8001118 <L6474_Move+0xac>)
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3324      	adds	r3, #36	; 0x24
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b08      	cmp	r3, #8
 8001092:	d003      	beq.n	800109c <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff62 	bl	8000f60 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d035      	beq.n	800110e <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	491c      	ldr	r1, [pc, #112]	; (8001118 <L6474_Move+0xac>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	3314      	adds	r3, #20
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	4917      	ldr	r1, [pc, #92]	; (8001118 <L6474_Move+0xac>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	3322      	adds	r3, #34	; 0x22
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2101      	movs	r1, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa38 	bl	8000544 <L6474_CmdGetParam>
 80010d4:	4603      	mov	r3, r0
 80010d6:	79fc      	ldrb	r4, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fceb 	bl	8001ab4 <L6474_ConvertPosition>
 80010de:	4602      	mov	r2, r0
 80010e0:	490d      	ldr	r1, [pc, #52]	; (8001118 <L6474_Move+0xac>)
 80010e2:	4623      	mov	r3, r4
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4423      	add	r3, r4
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3304      	adds	r3, #4
 80010ee:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fa62 	bl	80015c0 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fc19 	bl	8001938 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f829 	bl	8002160 <L6474_StartMovement>
  }  
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	bf00      	nop
 8001118:	2000020c 	.word	0x2000020c

0800111c <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <L6474_ReadId+0x14>)
 8001122:	881b      	ldrh	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200001aa 	.word	0x200001aa

08001134 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2119      	movs	r1, #25
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9fe 	bl	8000544 <L6474_CmdGetParam>
 8001148:	4603      	mov	r3, r0
 800114a:	b29b      	uxth	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fdcb 	bl	8002cfc <L6474_Board_ReleaseReset>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fdd0 	bl	8002d20 <L6474_Board_Reset>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e014      	b.n	80011be <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff2c 	bl	8000ff4 <L6474_HizStop>
    L6474_Reset(loop);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffe5 	bl	800116e <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 80011a4:	2001      	movs	r0, #1
 80011a6:	f001 fbdf 	bl	8002968 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fda5 	bl	8002cfc <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 80011b2:	2001      	movs	r0, #1
 80011b4:	f001 fbd8 	bl	8002968 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	3301      	adds	r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <L6474_ResetAllDevices+0x4c>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d3e4      	bcc.n	8001194 <L6474_ResetAllDevices+0xc>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000018c 	.word	0x2000018c

080011d8 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	4913      	ldr	r1, [pc, #76]	; (8001238 <L6474_Run+0x60>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3324      	adds	r3, #36	; 0x24
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d003      	beq.n	8001208 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff feac 	bl	8000f60 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001208:	79ba      	ldrb	r2, [r7, #6]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f9d6 	bl	80015c0 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <L6474_Run+0x60>)
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	3322      	adds	r3, #34	; 0x22
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 ff98 	bl	8002160 <L6474_StartMovement>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000020c 	.word	0x2000020c

0800123c <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 800124c:	79bb      	ldrb	r3, [r7, #6]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d816      	bhi.n	8001280 <L6474_SelectStepMode+0x44>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <L6474_SelectStepMode+0x1c>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	0800126f 	.word	0x0800126f
 8001260:	08001275 	.word	0x08001275
 8001264:	0800127b 	.word	0x0800127b
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001268:	2308      	movs	r3, #8
 800126a:	73fb      	strb	r3, [r7, #15]
      break;
 800126c:	e00b      	b.n	8001286 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 800126e:	2309      	movs	r3, #9
 8001270:	73fb      	strb	r3, [r7, #15]
      break;    
 8001272:	e008      	b.n	8001286 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001274:	230a      	movs	r3, #10
 8001276:	73fb      	strb	r3, [r7, #15]
      break;        
 8001278:	e005      	b.n	8001286 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 800127a:	230b      	movs	r3, #11
 800127c:	73fb      	strb	r3, [r7, #15]
      break;       
 800127e:	e002      	b.n	8001286 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001280:	230c      	movs	r3, #12
 8001282:	73fb      	strb	r3, [r7, #15]
      break;       
 8001284:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff feb3 	bl	8000ff4 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2116      	movs	r1, #22
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f956 	bl	8000544 <L6474_CmdGetParam>
 8001298:	4603      	mov	r3, r0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f023 0307 	bic.w	r3, r3, #7
 80012a0:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 80012a2:	7bba      	ldrb	r2, [r7, #14]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2116      	movs	r1, #22
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff facf 	bl	8000854 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2200      	movs	r2, #0
 80012ba:	2101      	movs	r1, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fac9 	bl	8000854 <L6474_CmdSetParam>
  
  return (1);
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d023      	beq.n	800132e <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4914      	ldr	r1, [pc, #80]	; (800133c <L6474_SetAcceleration+0x70>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	3324      	adds	r3, #36	; 0x24
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d00b      	beq.n	8001316 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <L6474_SetAcceleration+0x70>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	3322      	adds	r3, #34	; 0x22
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10b      	bne.n	800132e <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	4908      	ldr	r1, [pc, #32]	; (800133c <L6474_SetAcceleration+0x70>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	3318      	adds	r3, #24
 8001326:	88ba      	ldrh	r2, [r7, #4]
 8001328:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	2000020c 	.word	0x2000020c

08001340 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	ed87 0a01 	vstr	s0, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001350:	2301      	movs	r3, #1
 8001352:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001354:	edd7 7a01 	vldr	s15, [r7, #4]
 8001358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d508      	bpl.n	8001374 <L6474_SetAnalogValue+0x34>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d005      	beq.n	8001374 <L6474_SetAnalogValue+0x34>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d002      	beq.n	8001374 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 800136e:	2300      	movs	r3, #0
 8001370:	74fb      	strb	r3, [r7, #19]
 8001372:	e0d9      	b.n	8001528 <L6474_SetAnalogValue+0x1e8>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3b01      	subs	r3, #1
 8001378:	2b12      	cmp	r3, #18
 800137a:	f200 80ca 	bhi.w	8001512 <L6474_SetAnalogValue+0x1d2>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <L6474_SetAnalogValue+0x44>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	08001437 	.word	0x08001437
 8001388:	080013d1 	.word	0x080013d1
 800138c:	08001437 	.word	0x08001437
 8001390:	08001513 	.word	0x08001513
 8001394:	08001513 	.word	0x08001513
 8001398:	08001513 	.word	0x08001513
 800139c:	08001513 	.word	0x08001513
 80013a0:	08001513 	.word	0x08001513
 80013a4:	080014a1 	.word	0x080014a1
 80013a8:	08001513 	.word	0x08001513
 80013ac:	08001513 	.word	0x08001513
 80013b0:	08001513 	.word	0x08001513
 80013b4:	08001513 	.word	0x08001513
 80013b8:	08001513 	.word	0x08001513
 80013bc:	080014ed 	.word	0x080014ed
 80013c0:	080014ed 	.word	0x080014ed
 80013c4:	08001513 	.word	0x08001513
 80013c8:	08001513 	.word	0x08001513
 80013cc:	080014c7 	.word	0x080014c7
  else
  {
    switch (param)
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	d021      	beq.n	8001422 <L6474_SetAnalogValue+0xe2>
 80013de:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001534 <L6474_SetAnalogValue+0x1f4>
 80013e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	dc15      	bgt.n	800141c <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 80013f0:	2116      	movs	r1, #22
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff f8a6 	bl	8000544 <L6474_CmdGetParam>
 80013f8:	4603      	mov	r3, r0
 80013fa:	43db      	mvns	r3, r3
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	2201      	movs	r2, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d502      	bpl.n	8001422 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 800141c:	2300      	movs	r3, #0
 800141e:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001420:	e079      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001422:	edd7 7a01 	vldr	s15, [r7, #4]
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001432:	617b      	str	r3, [r7, #20]
        break;
 8001434:	e06f      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001436:	edd7 7a01 	vldr	s15, [r7, #4]
 800143a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001538 <L6474_SetAnalogValue+0x1f8>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	db27      	blt.n	8001498 <L6474_SetAnalogValue+0x158>
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800153c <L6474_SetAnalogValue+0x1fc>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d81e      	bhi.n	8001498 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 800145a:	edd7 7a01 	vldr	s15, [r7, #4]
 800145e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	db09      	blt.n	800147c <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001478:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 800147a:	e010      	b.n	800149e <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 800147c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001480:	eef1 7a67 	vneg.f32	s15, s15
 8001484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001488:	ee17 3a90 	vmov	r3, s15
 800148c:	43db      	mvns	r3, r3
 800148e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001496:	e002      	b.n	800149e <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001498:	2300      	movs	r3, #0
 800149a:	74fb      	strb	r3, [r7, #19]
        }
        break;
 800149c:	e03b      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
 800149e:	e03a      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 80014a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001540 <L6474_SetAnalogValue+0x200>
 80014a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b0:	dd02      	ble.n	80014b8 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 80014b6:	e02e      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 80014b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80014bc:	f001 f9be 	bl	800283c <L6474_Tval_Current_to_Par>
 80014c0:	4603      	mov	r3, r0
 80014c2:	617b      	str	r3, [r7, #20]
        break;
 80014c4:	e027      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 80014c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001544 <L6474_SetAnalogValue+0x204>
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd02      	ble.n	80014de <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 80014d8:	2300      	movs	r3, #0
 80014da:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 80014dc:	e01b      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 80014de:	ed97 0a01 	vldr	s0, [r7, #4]
 80014e2:	f001 f96f 	bl	80027c4 <L6474_Ocd_Th_to_Par>
 80014e6:	4603      	mov	r3, r0
 80014e8:	617b      	str	r3, [r7, #20]
        break;
 80014ea:	e014      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 80014ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001548 <L6474_SetAnalogValue+0x208>
 80014f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	dd02      	ble.n	8001504 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 80014fe:	2300      	movs	r3, #0
 8001500:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001502:	e008      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001504:	ed97 0a01 	vldr	s0, [r7, #4]
 8001508:	f001 f9ea 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 800150c:	4603      	mov	r3, r0
 800150e:	617b      	str	r3, [r7, #20]
        break;    
 8001510:	e001      	b.n	8001516 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001512:	2300      	movs	r3, #0
 8001514:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f996 	bl	8000854 <L6474_CmdSetParam>
    }
  }
  return result;
 8001528:	7cfb      	ldrb	r3, [r7, #19]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	43ff8000 	.word	0x43ff8000
 8001538:	ca000000 	.word	0xca000000
 800153c:	49fffff8 	.word	0x49fffff8
 8001540:	457a0000 	.word	0x457a0000
 8001544:	45bb8000 	.word	0x45bb8000
 8001548:	42800000 	.word	0x42800000

0800154c <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d023      	beq.n	80015ae <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	4914      	ldr	r1, [pc, #80]	; (80015bc <L6474_SetDeceleration+0x70>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3324      	adds	r3, #36	; 0x24
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 800157a:	2b08      	cmp	r3, #8
 800157c:	d00b      	beq.n	8001596 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	490e      	ldr	r1, [pc, #56]	; (80015bc <L6474_SetDeceleration+0x70>)
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3322      	adds	r3, #34	; 0x22
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10b      	bne.n	80015ae <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	4908      	ldr	r1, [pc, #32]	; (80015bc <L6474_SetDeceleration+0x70>)
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	331a      	adds	r3, #26
 80015a6:	88ba      	ldrh	r2, [r7, #4]
 80015a8:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}        
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	2000020c 	.word	0x2000020c

080015c0 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	490f      	ldr	r1, [pc, #60]	; (8001610 <L6474_SetDirection+0x50>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3324      	adds	r3, #36	; 0x24
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d10f      	bne.n	8001608 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 80015e8:	79fa      	ldrb	r2, [r7, #7]
 80015ea:	4909      	ldr	r1, [pc, #36]	; (8001610 <L6474_SetDirection+0x50>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3323      	adds	r3, #35	; 0x23
 80015f8:	79ba      	ldrb	r2, [r7, #6]
 80015fa:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fb9e 	bl	8002d44 <L6474_Board_SetDirectionGpio>
  }
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000020c 	.word	0x2000020c

08001614 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2101      	movs	r1, #1
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff8d 	bl	8000544 <L6474_CmdGetParam>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fa41 	bl	8001ab4 <L6474_ConvertPosition>
 8001632:	4602      	mov	r2, r0
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db04      	blt.n	800164a <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e005      	b.n	8001656 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3b01      	subs	r3, #1
 800164e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	2101      	movs	r1, #1
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f8f9 	bl	8000854 <L6474_CmdSetParam>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d807      	bhi.n	800168c <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <L6474_SetNbDevices+0x30>)
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <L6474_SetNbDevices+0x34>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 800168c:	2300      	movs	r3, #0
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200001aa 	.word	0x200001aa
 80016a0:	2000018c 	.word	0x2000018c

080016a4 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db04      	blt.n	80016c0 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e005      	b.n	80016cc <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	2103      	movs	r1, #3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f8be 	bl	8000854 <L6474_CmdSetParam>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d935      	bls.n	8001766 <L6474_SetMaxSpeed+0x86>
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001700:	4293      	cmp	r3, r2
 8001702:	d830      	bhi.n	8001766 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	491b      	ldr	r1, [pc, #108]	; (8001774 <L6474_SetMaxSpeed+0x94>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	331e      	adds	r3, #30
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001718:	88ba      	ldrh	r2, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d323      	bcc.n	8001766 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	4914      	ldr	r1, [pc, #80]	; (8001774 <L6474_SetMaxSpeed+0x94>)
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	3324      	adds	r3, #36	; 0x24
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001732:	2b08      	cmp	r3, #8
 8001734:	d00b      	beq.n	800174e <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <L6474_SetMaxSpeed+0x94>)
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3322      	adds	r3, #34	; 0x22
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10b      	bne.n	8001766 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	4908      	ldr	r1, [pc, #32]	; (8001774 <L6474_SetMaxSpeed+0x94>)
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	331c      	adds	r3, #28
 800175e:	88ba      	ldrh	r2, [r7, #4]
 8001760:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	2000020c 	.word	0x2000020c

08001778 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	460a      	mov	r2, r1
 8001782:	71fb      	strb	r3, [r7, #7]
 8001784:	4613      	mov	r3, r2
 8001786:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d935      	bls.n	80017fe <L6474_SetMinSpeed+0x86>
 8001792:	88bb      	ldrh	r3, [r7, #4]
 8001794:	f242 7210 	movw	r2, #10000	; 0x2710
 8001798:	4293      	cmp	r3, r2
 800179a:	d830      	bhi.n	80017fe <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <L6474_SetMinSpeed+0x94>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	331c      	adds	r3, #28
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 80017b0:	88ba      	ldrh	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d823      	bhi.n	80017fe <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4914      	ldr	r1, [pc, #80]	; (800180c <L6474_SetMinSpeed+0x94>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3324      	adds	r3, #36	; 0x24
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d00b      	beq.n	80017e6 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <L6474_SetMinSpeed+0x94>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	3322      	adds	r3, #34	; 0x22
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	4908      	ldr	r1, [pc, #32]	; (800180c <L6474_SetMinSpeed+0x94>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	331e      	adds	r3, #30
 80017f6:	88ba      	ldrh	r2, [r7, #4]
 80017f8:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	2000020c 	.word	0x2000020c

08001810 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	4907      	ldr	r1, [pc, #28]	; (8001840 <L6474_SetStopMode+0x30>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3325      	adds	r3, #37	; 0x25
 8001830:	79ba      	ldrb	r2, [r7, #6]
 8001832:	701a      	strb	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	2000020c 	.word	0x2000020c

08001844 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <L6474_SoftStop+0x4c>)
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3324      	adds	r3, #36	; 0x24
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b08      	cmp	r3, #8
 8001868:	d00b      	beq.n	8001882 <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	4908      	ldr	r1, [pc, #32]	; (8001890 <L6474_SoftStop+0x4c>)
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3322      	adds	r3, #34	; 0x22
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	2000020c 	.word	0x2000020c

08001894 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 800189e:	bf00      	nop
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f9ba 	bl	8000c1c <L6474_GetDeviceState>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d1f8      	bne.n	80018a0 <L6474_WaitWhileActive+0xc>
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d801      	bhi.n	80018d2 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 80018ce:	2302      	movs	r3, #2
 80018d0:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80018d2:	88bb      	ldrh	r3, [r7, #4]
 80018d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80018d8:	4293      	cmp	r3, r2
 80018da:	d902      	bls.n	80018e2 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 80018dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80018e0:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	4913      	ldr	r1, [pc, #76]	; (8001934 <L6474_ApplySpeed+0x7c>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3320      	adds	r3, #32
 80018f2:	88ba      	ldrh	r2, [r7, #4]
 80018f4:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d010      	beq.n	800191e <L6474_ApplySpeed+0x66>
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	dc13      	bgt.n	8001928 <L6474_ApplySpeed+0x70>
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <L6474_ApplySpeed+0x52>
 8001904:	2b01      	cmp	r3, #1
 8001906:	d005      	beq.n	8001914 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8001908:	e00e      	b.n	8001928 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f001 f8fb 	bl	8002b08 <L6474_Board_Pwm1SetFreq>
      break;
 8001912:	e00a      	b.n	800192a <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f001 f91e 	bl	8002b58 <L6474_Board_Pwm2SetFreq>
      break;
 800191c:	e005      	b.n	800192a <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f001 f941 	bl	8002ba8 <L6474_Board_Pwm3SetFreq>
      break;
 8001926:	e000      	b.n	800192a <L6474_ApplySpeed+0x72>
      break; //ignore error
 8001928:	bf00      	nop
  }
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000020c 	.word	0x2000020c

08001938 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	495a      	ldr	r1, [pc, #360]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	331e      	adds	r3, #30
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 8001958:	79fa      	ldrb	r2, [r7, #7]
 800195a:	4955      	ldr	r1, [pc, #340]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	440b      	add	r3, r1
 8001966:	331c      	adds	r3, #28
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	8b7b      	ldrh	r3, [r7, #26]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	494e      	ldr	r1, [pc, #312]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	331c      	adds	r3, #28
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	8b7b      	ldrh	r3, [r7, #26]
 800198c:	4413      	add	r3, r2
 800198e:	461a      	mov	r2, r3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	4944      	ldr	r1, [pc, #272]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3318      	adds	r3, #24
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80019b8:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	493b      	ldr	r1, [pc, #236]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	331a      	adds	r3, #26
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4413      	add	r3, r2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d242      	bcs.n	8001a76 <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	492f      	ldr	r1, [pc, #188]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	331a      	adds	r3, #26
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 8001a06:	79fa      	ldrb	r2, [r7, #7]
 8001a08:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	3318      	adds	r3, #24
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	fb02 f203 	mul.w	r2, r2, r3
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	440b      	add	r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d908      	bls.n	8001a48 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d104      	bne.n	8001a4c <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e001      	b.n	8001a4c <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8001a4c:	79fa      	ldrb	r2, [r7, #7]
 8001a4e:	4918      	ldr	r1, [pc, #96]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 8001a60:	79fa      	ldrb	r2, [r7, #7]
 8001a62:	4913      	ldr	r1, [pc, #76]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3310      	adds	r3, #16
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 8001a74:	e016      	b.n	8001aa4 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3308      	adds	r3, #8
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	1e59      	subs	r1, r3, #1
 8001a94:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <L6474_ComputeSpeedProfile+0x178>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4403      	add	r3, r0
 8001aa0:	3310      	adds	r3, #16
 8001aa2:	6019      	str	r1, [r3, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	2000020c 	.word	0x2000020c

08001ab4 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00d      	beq.n	8001ae2 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ad8:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	425b      	negs	r3, r3
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e001      	b.n	8001ae6 <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <L6474_ErrorHandler+0x28>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <L6474_ErrorHandler+0x28>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8001b10:	e000      	b.n	8001b14 <L6474_ErrorHandler+0x20>
    while(1)
 8001b12:	e7fe      	b.n	8001b12 <L6474_ErrorHandler+0x1e>
}
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000284 	.word	0x20000284

08001b20 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <L6474_FlagInterruptHandler+0x24>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <L6474_FlagInterruptHandler+0x28>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <L6474_FlagInterruptHandler+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <L6474_FlagInterruptHandler+0x28>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000288 	.word	0x20000288
 8001b48:	200001a9 	.word	0x200001a9

08001b4c <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	460a      	mov	r2, r1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <L6474_SendCommand+0x90>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <L6474_SendCommand+0x94>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001b7c:	f000 ff08 	bl	8002990 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e008      	b.n	8001b9c <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <L6474_SendCommand+0x98>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	3309      	adds	r3, #9
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <L6474_SendCommand+0x90>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d3ef      	bcc.n	8001b8a <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <L6474_SendCommand+0x98>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	79ba      	ldrb	r2, [r7, #6]
 8001bb2:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001bb4:	f000 fee3 	bl	800297e <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <L6474_SendCommand+0x94>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1d4      	bne.n	8001b70 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <L6474_SendCommand+0x9c>)
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <L6474_SendCommand+0xa0>)
 8001bca:	f000 fea7 	bl	800291c <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001bce:	f000 fedf 	bl	8002990 <L6474_Board_EnableIrq>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000018c 	.word	0x2000018c
 8001be0:	200001a8 	.word	0x200001a8
 8001be4:	20000190 	.word	0x20000190
 8001be8:	200001a5 	.word	0x200001a5
 8001bec:	20000199 	.word	0x20000199

08001bf0 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	8818      	ldrh	r0, [r3, #0]
 8001c02:	494c      	ldr	r1, [pc, #304]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3318      	adds	r3, #24
 8001c10:	4602      	mov	r2, r0
 8001c12:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	8858      	ldrh	r0, [r3, #2]
 8001c1a:	4946      	ldr	r1, [pc, #280]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	331a      	adds	r3, #26
 8001c28:	4602      	mov	r2, r0
 8001c2a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	8898      	ldrh	r0, [r3, #4]
 8001c32:	4940      	ldr	r1, [pc, #256]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	331c      	adds	r3, #28
 8001c40:	4602      	mov	r2, r0
 8001c42:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	88d8      	ldrh	r0, [r3, #6]
 8001c4a:	493a      	ldr	r1, [pc, #232]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	331e      	adds	r3, #30
 8001c58:	4602      	mov	r2, r0
 8001c5a:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	4935      	ldr	r1, [pc, #212]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	4930      	ldr	r1, [pc, #192]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	492b      	ldr	r1, [pc, #172]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	3308      	adds	r3, #8
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	4926      	ldr	r1, [pc, #152]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	4921      	ldr	r1, [pc, #132]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3310      	adds	r3, #16
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
 8001cc0:	491c      	ldr	r1, [pc, #112]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	3314      	adds	r3, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	4917      	ldr	r1, [pc, #92]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3320      	adds	r3, #32
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	4912      	ldr	r1, [pc, #72]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3322      	adds	r3, #34	; 0x22
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	490d      	ldr	r1, [pc, #52]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	3323      	adds	r3, #35	; 0x23
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	4908      	ldr	r1, [pc, #32]	; (8001d34 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3324      	adds	r3, #36	; 0x24
 8001d1e:	2208      	movs	r2, #8
 8001d20:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f8a2 	bl	8001e70 <L6474_SetRegisterToGivenValues>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000020c 	.word	0x2000020c

08001d38 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	4949      	ldr	r1, [pc, #292]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3318      	adds	r3, #24
 8001d52:	22a0      	movs	r2, #160	; 0xa0
 8001d54:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	4944      	ldr	r1, [pc, #272]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	331a      	adds	r3, #26
 8001d66:	22a0      	movs	r2, #160	; 0xa0
 8001d68:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8001d6a:	79fa      	ldrb	r2, [r7, #7]
 8001d6c:	493f      	ldr	r1, [pc, #252]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	331c      	adds	r3, #28
 8001d7a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001d7e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 8001d80:	79fa      	ldrb	r2, [r7, #7]
 8001d82:	493a      	ldr	r1, [pc, #232]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	331e      	adds	r3, #30
 8001d90:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d94:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	4934      	ldr	r1, [pc, #208]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8001da8:	79fa      	ldrb	r2, [r7, #7]
 8001daa:	4930      	ldr	r1, [pc, #192]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	440b      	add	r3, r1
 8001db6:	3304      	adds	r3, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	492b      	ldr	r1, [pc, #172]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3308      	adds	r3, #8
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	4926      	ldr	r1, [pc, #152]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	330c      	adds	r3, #12
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3310      	adds	r3, #16
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	491c      	ldr	r1, [pc, #112]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	3314      	adds	r3, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	4917      	ldr	r1, [pc, #92]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	3320      	adds	r3, #32
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001e20:	79fa      	ldrb	r2, [r7, #7]
 8001e22:	4912      	ldr	r1, [pc, #72]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3322      	adds	r3, #34	; 0x22
 8001e30:	2203      	movs	r2, #3
 8001e32:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8001e34:	79fa      	ldrb	r2, [r7, #7]
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3323      	adds	r3, #35	; 0x23
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3324      	adds	r3, #36	; 0x24
 8001e58:	2208      	movs	r2, #8
 8001e5a:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f882 	bl	8001f68 <L6474_SetRegisterToPredefinedValues>

}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000020c 	.word	0x2000020c

08001e70 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fce6 	bl	8000854 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fce0 	bl	8000854 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2200      	movs	r2, #0
 8001e98:	2103      	movs	r1, #3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fcda 	bl	8000854 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	2109      	movs	r1, #9
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fa46 	bl	8001340 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	210e      	movs	r1, #14
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fcc4 	bl	8000854 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	210f      	movs	r1, #15
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fa30 	bl	8001340 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eec:	2110      	movs	r1, #16
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fa26 	bl	8001340 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	eeb0 0a67 	vmov.f32	s0, s15
 8001f00:	2113      	movs	r1, #19
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fa1c 	bl	8001340 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2116      	movs	r1, #22
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fc9a 	bl	8000854 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2117      	movs	r1, #23
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fc93 	bl	8000854 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	7c5b      	ldrb	r3, [r3, #17]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8001f4a:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8001f50:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8001f52:	461a      	mov	r2, r3
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2118      	movs	r1, #24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fc7b 	bl	8000854 <L6474_CmdSetParam>
  
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2101      	movs	r1, #1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fc6b 	bl	8000854 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2200      	movs	r2, #0
 8001f82:	2102      	movs	r1, #2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fc65 	bl	8000854 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2103      	movs	r1, #3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fc5f 	bl	8000854 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f000 8094 	beq.w	80020c6 <L6474_SetRegisterToPredefinedValues+0x15e>
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	f300 80d7 	bgt.w	8002152 <L6474_SetRegisterToPredefinedValues+0x1ea>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <L6474_SetRegisterToPredefinedValues+0x46>
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d046      	beq.n	800203a <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8001fac:	e0d1      	b.n	8002152 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8001fae:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800215c <L6474_SetRegisterToPredefinedValues+0x1f4>
 8001fb2:	f000 fc43 	bl	800283c <L6474_Tval_Current_to_Par>
 8001fb6:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8001fb8:	461a      	mov	r2, r3
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2109      	movs	r1, #9
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fc48 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	2235      	movs	r2, #53	; 0x35
 8001fc8:	210e      	movs	r1, #14
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fc42 	bl	8000854 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8001fd0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001fd4:	f000 fc84 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 8001fd8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8001fda:	461a      	mov	r2, r3
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	210f      	movs	r1, #15
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fc37 	bl	8000854 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8001fe6:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8001fea:	f000 fc79 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 8001fee:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fc2c 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2201      	movs	r2, #1
 8002000:	2113      	movs	r1, #19
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fc26 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	228c      	movs	r2, #140	; 0x8c
 800200c:	2116      	movs	r1, #22
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fc20 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	22cf      	movs	r2, #207	; 0xcf
 8002018:	2117      	movs	r1, #23
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fc1a 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002026:	2118      	movs	r1, #24
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fc13 	bl	8000854 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fbec 	bl	8001810 <L6474_SetStopMode>
      break;
 8002038:	e08b      	b.n	8002152 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 800203a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800215c <L6474_SetRegisterToPredefinedValues+0x1f4>
 800203e:	f000 fbfd 	bl	800283c <L6474_Tval_Current_to_Par>
 8002042:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002044:	461a      	mov	r2, r3
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2109      	movs	r1, #9
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fc02 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2235      	movs	r2, #53	; 0x35
 8002054:	210e      	movs	r1, #14
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fbfc 	bl	8000854 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 800205c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002060:	f000 fc3e 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 8002064:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002066:	461a      	mov	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	210f      	movs	r1, #15
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fbf1 	bl	8000854 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 8002072:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002076:	f000 fc33 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 800207a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800207c:	461a      	mov	r2, r3
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2110      	movs	r1, #16
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fbe6 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2201      	movs	r2, #1
 800208c:	2113      	movs	r1, #19
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fbe0 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	228c      	movs	r2, #140	; 0x8c
 8002098:	2116      	movs	r1, #22
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fbda 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	22cf      	movs	r2, #207	; 0xcf
 80020a4:	2117      	movs	r1, #23
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fbd4 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80020b2:	2118      	movs	r1, #24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fbcd 	bl	8000854 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fba6 	bl	8001810 <L6474_SetStopMode>
      break;
 80020c4:	e045      	b.n	8002152 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 80020c6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800215c <L6474_SetRegisterToPredefinedValues+0x1f4>
 80020ca:	f000 fbb7 	bl	800283c <L6474_Tval_Current_to_Par>
 80020ce:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80020d0:	461a      	mov	r2, r3
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2109      	movs	r1, #9
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fbbc 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2235      	movs	r2, #53	; 0x35
 80020e0:	210e      	movs	r1, #14
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fbb6 	bl	8000854 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 80020e8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80020ec:	f000 fbf8 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 80020f0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80020f2:	461a      	mov	r2, r3
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	210f      	movs	r1, #15
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fbab 	bl	8000854 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 80020fe:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002102:	f000 fbed 	bl	80028e0 <L6474_Tmin_Time_to_Par>
 8002106:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002108:	461a      	mov	r2, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2110      	movs	r1, #16
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fba0 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2201      	movs	r2, #1
 8002118:	2113      	movs	r1, #19
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fb9a 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	228c      	movs	r2, #140	; 0x8c
 8002124:	2116      	movs	r1, #22
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fb94 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	22cf      	movs	r2, #207	; 0xcf
 8002130:	2117      	movs	r1, #23
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fb8e 	bl	8000854 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800213e:	2118      	movs	r1, #24
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fb87 	bl	8000854 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fb60 	bl	8001810 <L6474_SetStopMode>
      break;
 8002150:	bf00      	nop
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	437a0000 	.word	0x437a0000

08002160 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f9db 	bl	8000528 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	4922      	ldr	r1, [pc, #136]	; (8002200 <L6474_StartMovement+0xa0>)
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3308      	adds	r3, #8
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002188:	79fa      	ldrb	r2, [r7, #7]
 800218a:	491d      	ldr	r1, [pc, #116]	; (8002200 <L6474_StartMovement+0xa0>)
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3324      	adds	r3, #36	; 0x24
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e009      	b.n	80021b2 <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 800219e:	79fa      	ldrb	r2, [r7, #7]
 80021a0:	4917      	ldr	r1, [pc, #92]	; (8002200 <L6474_StartMovement+0xa0>)
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3324      	adds	r3, #36	; 0x24
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80021b2:	79fa      	ldrb	r2, [r7, #7]
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <L6474_StartMovement+0xa0>)
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	490e      	ldr	r1, [pc, #56]	; (8002200 <L6474_StartMovement+0xa0>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	330c      	adds	r3, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 80021d8:	79fa      	ldrb	r2, [r7, #7]
 80021da:	4909      	ldr	r1, [pc, #36]	; (8002200 <L6474_StartMovement+0xa0>)
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	331e      	adds	r3, #30
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb61 	bl	80018b8 <L6474_ApplySpeed>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	2000020c 	.word	0x2000020c

08002204 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 800220e:	4b96      	ldr	r3, [pc, #600]	; (8002468 <L6474_StepClockHandler+0x264>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002214:	79fa      	ldrb	r2, [r7, #7]
 8002216:	4995      	ldr	r1, [pc, #596]	; (800246c <L6474_StepClockHandler+0x268>)
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	330c      	adds	r3, #12
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1c59      	adds	r1, r3, #1
 8002228:	4890      	ldr	r0, [pc, #576]	; (800246c <L6474_StepClockHandler+0x268>)
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4403      	add	r3, r0
 8002234:	330c      	adds	r3, #12
 8002236:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	498c      	ldr	r1, [pc, #560]	; (800246c <L6474_StepClockHandler+0x268>)
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3324      	adds	r3, #36	; 0x24
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b03      	cmp	r3, #3
 800224e:	f000 810f 	beq.w	8002470 <L6474_StepClockHandler+0x26c>
 8002252:	2b03      	cmp	r3, #3
 8002254:	f300 82a4 	bgt.w	80027a0 <L6474_StepClockHandler+0x59c>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <L6474_StepClockHandler+0x60>
 800225c:	2b02      	cmp	r3, #2
 800225e:	f000 819b 	beq.w	8002598 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002262:	e29d      	b.n	80027a0 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	4981      	ldr	r1, [pc, #516]	; (800246c <L6474_StepClockHandler+0x268>)
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	330c      	adds	r3, #12
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002278:	79fa      	ldrb	r2, [r7, #7]
 800227a:	497c      	ldr	r1, [pc, #496]	; (800246c <L6474_StepClockHandler+0x268>)
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3308      	adds	r3, #8
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 800228c:	79fa      	ldrb	r2, [r7, #7]
 800228e:	4977      	ldr	r1, [pc, #476]	; (800246c <L6474_StepClockHandler+0x268>)
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	3320      	adds	r3, #32
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 80022a0:	79fa      	ldrb	r2, [r7, #7]
 80022a2:	4972      	ldr	r1, [pc, #456]	; (800246c <L6474_StepClockHandler+0x268>)
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3318      	adds	r3, #24
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	496c      	ldr	r1, [pc, #432]	; (800246c <L6474_StepClockHandler+0x268>)
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	3322      	adds	r3, #34	; 0x22
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d017      	beq.n	8002300 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	4966      	ldr	r1, [pc, #408]	; (800246c <L6474_StepClockHandler+0x268>)
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3322      	adds	r3, #34	; 0x22
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01f      	beq.n	8002328 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	4960      	ldr	r1, [pc, #384]	; (800246c <L6474_StepClockHandler+0x268>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3310      	adds	r3, #16
 80022f8:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d113      	bne.n	8002328 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	495a      	ldr	r1, [pc, #360]	; (800246c <L6474_StepClockHandler+0x268>)
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3324      	adds	r3, #36	; 0x24
 8002310:	2202      	movs	r2, #2
 8002312:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002314:	79fa      	ldrb	r2, [r7, #7]
 8002316:	4955      	ldr	r1, [pc, #340]	; (800246c <L6474_StepClockHandler+0x268>)
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e09e      	b.n	8002466 <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002328:	79fa      	ldrb	r2, [r7, #7]
 800232a:	4950      	ldr	r1, [pc, #320]	; (800246c <L6474_StepClockHandler+0x268>)
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	331c      	adds	r3, #28
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800233e:	429a      	cmp	r2, r3
 8002340:	d20f      	bcs.n	8002362 <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	4949      	ldr	r1, [pc, #292]	; (800246c <L6474_StepClockHandler+0x268>)
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3322      	adds	r3, #34	; 0x22
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d10a      	bne.n	8002378 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	4941      	ldr	r1, [pc, #260]	; (800246c <L6474_StepClockHandler+0x268>)
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3324      	adds	r3, #36	; 0x24
 8002372:	2203      	movs	r2, #3
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e076      	b.n	8002466 <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 800237e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <L6474_StepClockHandler+0x184>
 8002384:	2301      	movs	r3, #1
 8002386:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	4938      	ldr	r1, [pc, #224]	; (800246c <L6474_StepClockHandler+0x268>)
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	79fa      	ldrb	r2, [r7, #7]
 80023a2:	4419      	add	r1, r3
 80023a4:	4831      	ldr	r0, [pc, #196]	; (800246c <L6474_StepClockHandler+0x268>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4403      	add	r3, r0
 80023b0:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 80023b2:	e017      	b.n	80023e4 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 80023b4:	79fa      	ldrb	r2, [r7, #7]
 80023b6:	492d      	ldr	r1, [pc, #180]	; (800246c <L6474_StepClockHandler+0x268>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	79fa      	ldrb	r2, [r7, #7]
 80023c6:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 80023ca:	4828      	ldr	r0, [pc, #160]	; (800246c <L6474_StepClockHandler+0x268>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4403      	add	r3, r0
 80023d6:	6019      	str	r1, [r3, #0]
            speed +=1;
 80023d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023da:	3301      	adds	r3, #1
 80023dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	4921      	ldr	r1, [pc, #132]	; (800246c <L6474_StepClockHandler+0x268>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d2dc      	bcs.n	80023b4 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 80023fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 81d0 	beq.w	80027a4 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002404:	79fa      	ldrb	r2, [r7, #7]
 8002406:	4919      	ldr	r1, [pc, #100]	; (800246c <L6474_StepClockHandler+0x268>)
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	331c      	adds	r3, #28
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800241a:	429a      	cmp	r2, r3
 800241c:	d909      	bls.n	8002432 <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 800241e:	79fa      	ldrb	r2, [r7, #7]
 8002420:	4912      	ldr	r1, [pc, #72]	; (800246c <L6474_StepClockHandler+0x268>)
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	331c      	adds	r3, #28
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002432:	79fa      	ldrb	r2, [r7, #7]
 8002434:	490d      	ldr	r1, [pc, #52]	; (800246c <L6474_StepClockHandler+0x268>)
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	3320      	adds	r3, #32
 8002442:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002444:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	4908      	ldr	r1, [pc, #32]	; (800246c <L6474_StepClockHandler+0x268>)
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3320      	adds	r3, #32
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29a      	uxth	r2, r3
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fa2a 	bl	80018b8 <L6474_ApplySpeed>
        break;
 8002464:	e19e      	b.n	80027a4 <L6474_StepClockHandler+0x5a0>
 8002466:	e19d      	b.n	80027a4 <L6474_StepClockHandler+0x5a0>
 8002468:	200001a9 	.word	0x200001a9
 800246c:	2000020c 	.word	0x2000020c
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002470:	79fa      	ldrb	r2, [r7, #7]
 8002472:	499c      	ldr	r1, [pc, #624]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	331c      	adds	r3, #28
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	4997      	ldr	r1, [pc, #604]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	330c      	adds	r3, #12
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002498:	79fa      	ldrb	r2, [r7, #7]
 800249a:	4992      	ldr	r1, [pc, #584]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	3322      	adds	r3, #34	; 0x22
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d030      	beq.n	8002512 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	498c      	ldr	r1, [pc, #560]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3322      	adds	r3, #34	; 0x22
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 80024c8:	79fa      	ldrb	r2, [r7, #7]
 80024ca:	4986      	ldr	r1, [pc, #536]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	3310      	adds	r3, #16
 80024d8:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80024da:	6a3a      	ldr	r2, [r7, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d218      	bcs.n	8002512 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	4980      	ldr	r1, [pc, #512]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	3322      	adds	r3, #34	; 0x22
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d120      	bne.n	800253a <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	497a      	ldr	r1, [pc, #488]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3320      	adds	r3, #32
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 800250c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800250e:	429a      	cmp	r2, r3
 8002510:	d213      	bcs.n	800253a <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002512:	79fa      	ldrb	r2, [r7, #7]
 8002514:	4973      	ldr	r1, [pc, #460]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	3324      	adds	r3, #36	; 0x24
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	496e      	ldr	r1, [pc, #440]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
      break;
 8002538:	e136      	b.n	80027a8 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 800253a:	79fa      	ldrb	r2, [r7, #7]
 800253c:	4969      	ldr	r1, [pc, #420]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	3322      	adds	r3, #34	; 0x22
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 812a 	bne.w	80027a8 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	4963      	ldr	r1, [pc, #396]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	3320      	adds	r3, #32
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002568:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800256a:	429a      	cmp	r2, r3
 800256c:	f240 811c 	bls.w	80027a8 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002570:	79fa      	ldrb	r2, [r7, #7]
 8002572:	495c      	ldr	r1, [pc, #368]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3324      	adds	r3, #36	; 0x24
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002584:	79fa      	ldrb	r2, [r7, #7]
 8002586:	4957      	ldr	r1, [pc, #348]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
      break;
 8002596:	e107      	b.n	80027a8 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002598:	79fa      	ldrb	r2, [r7, #7]
 800259a:	4952      	ldr	r1, [pc, #328]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	330c      	adds	r3, #12
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	494d      	ldr	r1, [pc, #308]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3320      	adds	r3, #32
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	4948      	ldr	r1, [pc, #288]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	331a      	adds	r3, #26
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	4942      	ldr	r1, [pc, #264]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	3322      	adds	r3, #34	; 0x22
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d10c      	bne.n	800260a <L6474_StepClockHandler+0x406>
 80025f0:	79fa      	ldrb	r2, [r7, #7]
 80025f2:	493c      	ldr	r1, [pc, #240]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	331e      	adds	r3, #30
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002606:	429a      	cmp	r2, r3
 8002608:	d917      	bls.n	800263a <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	3322      	adds	r3, #34	; 0x22
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 800261e:	2b00      	cmp	r3, #0
 8002620:	d010      	beq.n	8002644 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002622:	79fa      	ldrb	r2, [r7, #7]
 8002624:	492f      	ldr	r1, [pc, #188]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	3314      	adds	r3, #20
 8002632:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	429a      	cmp	r2, r3
 8002638:	d304      	bcc.n	8002644 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fc8f 	bl	8000f60 <L6474_HardStop>
 8002642:	e0ac      	b.n	800279e <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	4927      	ldr	r1, [pc, #156]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3322      	adds	r3, #34	; 0x22
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d117      	bne.n	800268c <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	4921      	ldr	r1, [pc, #132]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	331c      	adds	r3, #28
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002670:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002672:	429a      	cmp	r2, r3
 8002674:	d80a      	bhi.n	800268c <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	491a      	ldr	r1, [pc, #104]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	3324      	adds	r3, #36	; 0x24
 8002686:	2203      	movs	r2, #3
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e088      	b.n	800279e <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 800268c:	79fa      	ldrb	r2, [r7, #7]
 800268e:	4915      	ldr	r1, [pc, #84]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	331e      	adds	r3, #30
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80026a2:	429a      	cmp	r2, r3
 80026a4:	f240 8082 	bls.w	80027ac <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 80026ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <L6474_StepClockHandler+0x4b4>
 80026b4:	2301      	movs	r3, #1
 80026b6:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 80026b8:	79fa      	ldrb	r2, [r7, #7]
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	4419      	add	r1, r3
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <L6474_StepClockHandler+0x4e0>)
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4403      	add	r3, r0
 80026e0:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 80026e2:	e01c      	b.n	800271e <L6474_StepClockHandler+0x51a>
 80026e4:	2000020c 	.word	0x2000020c
            devicePrm[deviceId].accu -= (0X10000L);
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	4934      	ldr	r1, [pc, #208]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 80026fe:	482f      	ldr	r0, [pc, #188]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4403      	add	r3, r0
 800270a:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 800270c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800270e:	2b01      	cmp	r3, #1
 8002710:	d902      	bls.n	8002718 <L6474_StepClockHandler+0x514>
              speed -=1;
 8002712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002714:	3b01      	subs	r3, #1
 8002716:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 800271e:	79fa      	ldrb	r2, [r7, #7]
 8002720:	4926      	ldr	r1, [pc, #152]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002732:	d2d9      	bcs.n	80026e8 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002734:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002738:	2b00      	cmp	r3, #0
 800273a:	d037      	beq.n	80027ac <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	491f      	ldr	r1, [pc, #124]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	331e      	adds	r3, #30
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002752:	429a      	cmp	r2, r3
 8002754:	d209      	bcs.n	800276a <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	4918      	ldr	r1, [pc, #96]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	331e      	adds	r3, #30
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	4913      	ldr	r1, [pc, #76]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	3320      	adds	r3, #32
 800277a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800277c:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 800277e:	79fa      	ldrb	r2, [r7, #7]
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <L6474_StepClockHandler+0x5b8>)
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	3320      	adds	r3, #32
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f88e 	bl	80018b8 <L6474_ApplySpeed>
      break;
 800279c:	e006      	b.n	80027ac <L6474_StepClockHandler+0x5a8>
 800279e:	e005      	b.n	80027ac <L6474_StepClockHandler+0x5a8>
      break;
 80027a0:	bf00      	nop
 80027a2:	e004      	b.n	80027ae <L6474_StepClockHandler+0x5aa>
        break;
 80027a4:	bf00      	nop
 80027a6:	e002      	b.n	80027ae <L6474_StepClockHandler+0x5aa>
      break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <L6474_StepClockHandler+0x5aa>
      break;
 80027ac:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <L6474_StepClockHandler+0x5bc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000020c 	.word	0x2000020c
 80027c0:	200001a9 	.word	0x200001a9

080027c4 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 80027ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002804 <L6474_Ocd_Th_to_Par+0x40>
 80027d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027da:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002808 <L6474_Ocd_Th_to_Par+0x44>
 80027de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ee:	edc7 7a00 	vstr	s15, [r7]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2db      	uxtb	r3, r3
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	43bb8000 	.word	0x43bb8000
 8002808:	3b2eb80f 	.word	0x3b2eb80f

0800280c <L6474_Ocd_Par_to_Th>:
 * @brief Converts  OCD_TH register values in mA 
 * @param[in] Par OCD regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Ocd_Par_to_Th(uint8_t Par)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*375.f);
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	3301      	adds	r3, #1
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002822:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002838 <L6474_Ocd_Par_to_Th+0x2c>
 8002826:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800282a:	eeb0 0a67 	vmov.f32	s0, s15
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	43bb8000 	.word	0x43bb8000

0800283c <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8002846:	edd7 7a01 	vldr	s15, [r7, #4]
 800284a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800287c <L6474_Tval_Current_to_Par+0x40>
 800284e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002852:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002880 <L6474_Tval_Current_to_Par+0x44>
 8002856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800285e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002866:	edc7 7a00 	vstr	s15, [r7]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2db      	uxtb	r3, r3
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	41fa0000 	.word	0x41fa0000
 8002880:	3d03126f 	.word	0x3d03126f

08002884 <L6474_Tval_Par_to_Current>:
 * @brief Converts  TVAL register values in mA 
 * @param[in] Par TVAL regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Tval_Par_to_Current(uint8_t Par)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*31.25f);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	3301      	adds	r3, #1
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80028b0 <L6474_Tval_Par_to_Current+0x2c>
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	41fa0000 	.word	0x41fa0000

080028b4 <L6474_Tmin_Par_to_Time>:
 * @brief Convert TON/TOFF values in time (us)
 * @param[in] Par Values from TON_MIN/TOFF_MIN 
 * @retval time in us
 **********************************************************/
inline float L6474_Tmin_Par_to_Time(uint8_t Par)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1)) * 0.5f);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	3301      	adds	r3, #1
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028d2:	eeb0 0a67 	vmov.f32	s0, s15
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 80028ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002906:	edc7 7a00 	vstr	s15, [r7]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2db      	uxtb	r3, r3
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <L6474_WriteBytes+0x40>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	6839      	ldr	r1, [r7, #0]
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa6f 	bl	8002e14 <L6474_Board_SpiWriteBytes>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 800293c:	f248 0001 	movw	r0, #32769	; 0x8001
 8002940:	f7ff f8d8 	bl	8001af4 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <L6474_WriteBytes+0x44>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <L6474_WriteBytes+0x48>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	2000018c 	.word	0x2000018c
 8002960:	200001a9 	.word	0x200001a9
 8002964:	200001a8 	.word	0x200001a8

08002968 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 ffa9 	bl	80038c8 <HAL_Delay>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002982:	b672      	cpsid	i
}
 8002984:	bf00      	nop
  __disable_irq();
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002994:	b662      	cpsie	i
}
 8002996:	bf00      	nop
  __enable_irq();
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d165      	bne.n	8002a80 <L6474_Board_GpioInit+0xdc>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	4b4f      	ldr	r3, [pc, #316]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a4e      	ldr	r2, [pc, #312]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	4b48      	ldr	r3, [pc, #288]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a40      	ldr	r2, [pc, #256]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <L6474_Board_GpioInit+0x154>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8002a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <L6474_Board_GpioInit+0x158>)
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002a16:	2301      	movs	r3, #1
 8002a18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4837      	ldr	r0, [pc, #220]	; (8002b00 <L6474_Board_GpioInit+0x15c>)
 8002a22:	f001 f883 	bl	8003b2c <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2105      	movs	r1, #5
 8002a2a:	2028      	movs	r0, #40	; 0x28
 8002a2c:	f001 f847 	bl	8003abe <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8002a30:	2028      	movs	r0, #40	; 0x28
 8002a32:	f001 f860 	bl	8003af6 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8002a36:	2340      	movs	r3, #64	; 0x40
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002a42:	2301      	movs	r3, #1
 8002a44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	482d      	ldr	r0, [pc, #180]	; (8002b04 <L6474_Board_GpioInit+0x160>)
 8002a4e:	f001 f86d 	bl	8003b2c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8002a52:	2201      	movs	r2, #1
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	482b      	ldr	r0, [pc, #172]	; (8002b04 <L6474_Board_GpioInit+0x160>)
 8002a58:	f001 fa04 	bl	8003e64 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8002a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8002a6e:	f107 0314 	add.w	r3, r7, #20
 8002a72:	4619      	mov	r1, r3
 8002a74:	4822      	ldr	r0, [pc, #136]	; (8002b00 <L6474_Board_GpioInit+0x15c>)
 8002a76:	f001 f859 	bl	8003b2c <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f000 f950 	bl	8002d20 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d025      	beq.n	8002ad2 <L6474_Board_GpioInit+0x12e>
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	dc32      	bgt.n	8002af0 <L6474_Board_GpioInit+0x14c>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <L6474_Board_GpioInit+0xf0>
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d010      	beq.n	8002ab4 <L6474_Board_GpioInit+0x110>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8002a92:	e02d      	b.n	8002af0 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8002a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a98:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4814      	ldr	r0, [pc, #80]	; (8002b00 <L6474_Board_GpioInit+0x15c>)
 8002aae:	f001 f83d 	bl	8003b2c <HAL_GPIO_Init>
      break;
 8002ab2:	e01d      	b.n	8002af0 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480e      	ldr	r0, [pc, #56]	; (8002b04 <L6474_Board_GpioInit+0x160>)
 8002acc:	f001 f82e 	bl	8003b2c <HAL_GPIO_Init>
      break;
 8002ad0:	e00e      	b.n	8002af0 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4806      	ldr	r0, [pc, #24]	; (8002b04 <L6474_Board_GpioInit+0x160>)
 8002aea:	f001 f81f 	bl	8003b2c <HAL_GPIO_Init>
        break;
 8002aee:	bf00      	nop
}
 8002af0:	bf00      	nop
 8002af2:	3728      	adds	r7, #40	; 0x28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	10210000 	.word	0x10210000
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40020400 	.word	0x40020400

08002b08 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002b12:	f001 fd0f 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8002b16:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <L6474_Board_Pwm1SetFreq+0x4c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <L6474_Board_Pwm1SetFreq+0x4c>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <L6474_Board_Pwm1SetFreq+0x4c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3334      	adds	r3, #52	; 0x34
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	0852      	lsrs	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8002b42:	2104      	movs	r1, #4
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <L6474_Board_Pwm1SetFreq+0x4c>)
 8002b46:	f002 f927 	bl	8004d98 <HAL_TIM_PWM_Start_IT>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000028c 	.word	0x2000028c

08002b58 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002b62:	f001 fce7 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8002b66:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3334      	adds	r3, #52	; 0x34
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	0852      	lsrs	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8002b92:	2104      	movs	r1, #4
 8002b94:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002b96:	f002 f8ff 	bl	8004d98 <HAL_TIM_PWM_Start_IT>
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000304 	.word	0x20000304

08002ba8 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002bb2:	f001 fcbf 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8002bb6:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	02db      	lsls	r3, r3, #11
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8002bd4:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3334      	adds	r3, #52	; 0x34
 8002bda:	3308      	adds	r3, #8
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	0852      	lsrs	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 8002be2:	2108      	movs	r1, #8
 8002be4:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002be6:	f002 f8d7 	bl	8004d98 <HAL_TIM_PWM_Start_IT>
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200002c8 	.word	0x200002c8

08002bf8 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d009      	beq.n	8002c1c <L6474_Board_PwmInit+0x24>
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d010      	beq.n	8002c2e <L6474_Board_PwmInit+0x36>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <L6474_Board_PwmInit+0x9c>)
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <L6474_Board_PwmInit+0xa0>)
 8002c14:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8002c16:	2304      	movs	r3, #4
 8002c18:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8002c1a:	e010      	b.n	8002c3e <L6474_Board_PwmInit+0x46>
    case  1:
      pHTim = &hTimPwm2;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <L6474_Board_PwmInit+0xa4>)
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c26:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8002c28:	2304      	movs	r3, #4
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c2c:	e007      	b.n	8002c3e <L6474_Board_PwmInit+0x46>


    case 2:
      pHTim = &hTimPwm3;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <L6474_Board_PwmInit+0xa8>)
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <L6474_Board_PwmInit+0xac>)
 8002c36:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c3c:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002c44:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8002c52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c54:	f002 f828 	bl	8004ca8 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c58:	2360      	movs	r3, #96	; 0x60
 8002c5a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c72:	f002 fa07 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4619      	mov	r1, r3
 8002c84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c86:	f002 fd2b 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	; 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2000028c 	.word	0x2000028c
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	20000304 	.word	0x20000304
 8002ca0:	200002c8 	.word	0x200002c8
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d010      	beq.n	8002cda <L6474_Board_PwmStop+0x32>
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	dc13      	bgt.n	8002ce4 <L6474_Board_PwmStop+0x3c>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <L6474_Board_PwmStop+0x1e>
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d005      	beq.n	8002cd0 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8002cc4:	e00e      	b.n	8002ce4 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4809      	ldr	r0, [pc, #36]	; (8002cf0 <L6474_Board_PwmStop+0x48>)
 8002cca:	f002 f819 	bl	8004d00 <HAL_TIM_PWM_Stop>
      break;
 8002cce:	e00a      	b.n	8002ce6 <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8002cd0:	2104      	movs	r1, #4
 8002cd2:	4808      	ldr	r0, [pc, #32]	; (8002cf4 <L6474_Board_PwmStop+0x4c>)
 8002cd4:	f002 f814 	bl	8004d00 <HAL_TIM_PWM_Stop>
      break;
 8002cd8:	e005      	b.n	8002ce6 <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 8002cda:	2108      	movs	r1, #8
 8002cdc:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <L6474_Board_PwmStop+0x50>)
 8002cde:	f002 f80f 	bl	8004d00 <HAL_TIM_PWM_Stop>
      break;
 8002ce2:	e000      	b.n	8002ce6 <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8002ce4:	bf00      	nop
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000028c 	.word	0x2000028c
 8002cf4:	20000304 	.word	0x20000304
 8002cf8:	200002c8 	.word	0x200002c8

08002cfc <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 8002d06:	2201      	movs	r2, #1
 8002d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <L6474_Board_ReleaseReset+0x20>)
 8002d0e:	f001 f8a9 	bl	8003e64 <HAL_GPIO_WritePin>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40020000 	.word	0x40020000

08002d20 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <L6474_Board_Reset+0x20>)
 8002d32:	f001 f897 	bl	8003e64 <HAL_GPIO_WritePin>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40020000 	.word	0x40020000

08002d44 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d006      	beq.n	8002d68 <L6474_Board_SetDirectionGpio+0x24>
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	dc1a      	bgt.n	8002d94 <L6474_Board_SetDirectionGpio+0x50>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d010      	beq.n	8002d84 <L6474_Board_SetDirectionGpio+0x40>
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d007      	beq.n	8002d76 <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 8002d66:	e015      	b.n	8002d94 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8002d68:	79bb      	ldrb	r3, [r7, #6]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	480b      	ldr	r0, [pc, #44]	; (8002d9c <L6474_Board_SetDirectionGpio+0x58>)
 8002d70:	f001 f878 	bl	8003e64 <HAL_GPIO_WritePin>
      break;
 8002d74:	e00e      	b.n	8002d94 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 8002d76:	79bb      	ldrb	r3, [r7, #6]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	4807      	ldr	r0, [pc, #28]	; (8002d9c <L6474_Board_SetDirectionGpio+0x58>)
 8002d7e:	f001 f871 	bl	8003e64 <HAL_GPIO_WritePin>
      break;
 8002d82:	e007      	b.n	8002d94 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d8c:	4804      	ldr	r0, [pc, #16]	; (8002da0 <L6474_Board_SetDirectionGpio+0x5c>)
 8002d8e:	f001 f869 	bl	8003e64 <HAL_GPIO_WritePin>
      break;
 8002d92:	bf00      	nop
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020000 	.word	0x40020000

08002da4 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dac:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <L6474_Board_SpiInit+0x6c>)
 8002dae:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002db2:	2220      	movs	r2, #32
 8002db4:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002de2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de6:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002df4:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <L6474_Board_SpiInit+0x68>)
 8002df8:	f001 fc52 	bl	80046a0 <HAL_SPI_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8002e00:	79fb      	ldrb	r3, [r7, #7]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200001ac 	.word	0x200001ac
 8002e10:	40013000 	.word	0x40013000

08002e14 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8002e22:	2200      	movs	r2, #0
 8002e24:	2140      	movs	r1, #64	; 0x40
 8002e26:	4816      	ldr	r0, [pc, #88]	; (8002e80 <L6474_Board_SpiWriteBytes+0x6c>)
 8002e28:	f001 f81c 	bl	8003e64 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e016      	b.n	8002e60 <L6474_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8002e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2301      	movs	r3, #1
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	68f9      	ldr	r1, [r7, #12]
 8002e3e:	4811      	ldr	r0, [pc, #68]	; (8002e84 <L6474_Board_SpiWriteBytes+0x70>)
 8002e40:	f001 fc99 	bl	8004776 <HAL_SPI_TransmitReceive>
 8002e44:	4603      	mov	r3, r0
 8002e46:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <L6474_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d3e4      	bcc.n	8002e32 <L6474_Board_SpiWriteBytes+0x1e>
 8002e68:	e000      	b.n	8002e6c <L6474_Board_SpiWriteBytes+0x58>
      break;
 8002e6a:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <L6474_Board_SpiWriteBytes+0x6c>)
 8002e72:	f000 fff7 	bl	8003e64 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40020400 	.word	0x40020400
 8002e84:	200001ac 	.word	0x200001ac

08002e88 <l647x_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	2300      	movs	r3, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	2300      	movs	r3, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	2300      	movs	r3, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <BSP_MotorControl_AttachErrorHandler+0x26>
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e004      	b.n	8002f28 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8002f1e:	f640 0002 	movw	r0, #2050	; 0x802
 8002f22:	f000 f825 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000204 	.word	0x20000204

08002f34 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e004      	b.n	8002f64 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8002f5a:	f640 0003 	movw	r0, #2051	; 0x803
 8002f5e:	f000 f807 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000204 	.word	0x20000204

08002f70 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <BSP_MotorControl_ErrorHandler+0x38>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <BSP_MotorControl_ErrorHandler+0x2e>
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <BSP_MotorControl_ErrorHandler+0x38>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <BSP_MotorControl_ErrorHandler+0x38>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8002f9c:	e000      	b.n	8002fa0 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8002f9e:	e7fe      	b.n	8002f9e <BSP_MotorControl_ErrorHandler+0x2e>
}
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000204 	.word	0x20000204

08002fac <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <BSP_MotorControl_Init+0x3c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <BSP_MotorControl_Init+0x2a>
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <BSP_MotorControl_Init+0x3c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <BSP_MotorControl_Init+0x3c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6838      	ldr	r0, [r7, #0]
 8002fd2:	4798      	blx	r3
 8002fd4:	e004      	b.n	8002fe0 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8002fd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fda:	f7ff ffc9 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000204 	.word	0x20000204

08002fec <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <BSP_MotorControl_FlagInterruptHandler+0x20>
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	4798      	blx	r3
 800300a:	e004      	b.n	8003016 <BSP_MotorControl_FlagInterruptHandler+0x2a>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 800300c:	f640 0005 	movw	r0, #2053	; 0x805
 8003010:	f7ff ffae 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000204 	.word	0x20000204

08003020 <BSP_MotorControl_GetCurrentSpeed>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval Speed in pps for stepper motor
 *               in % for Brush DC motor (0-100)   
 **********************************************************/
uint16_t BSP_MotorControl_GetCurrentSpeed(uint8_t deviceId)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  uint16_t currentSpeed = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetCurrentSpeed != 0))
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <BSP_MotorControl_GetCurrentSpeed+0x32>
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <BSP_MotorControl_GetCurrentSpeed+0x32>
  {
    currentSpeed = motorDrvHandle->GetCurrentSpeed(deviceId);
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	79fa      	ldrb	r2, [r7, #7]
 8003048:	4610      	mov	r0, r2
 800304a:	4798      	blx	r3
 800304c:	4603      	mov	r3, r0
 800304e:	81fb      	strh	r3, [r7, #14]
 8003050:	e003      	b.n	800305a <BSP_MotorControl_GetCurrentSpeed+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(7);
 8003052:	f640 0007 	movw	r0, #2055	; 0x807
 8003056:	f7ff ff8b 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }  
  return(currentSpeed); 
 800305a:	89fb      	ldrh	r3, [r7, #14]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000204 	.word	0x20000204

08003068 <BSP_MotorControl_GetDeviceState>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  motorState_t state = INACTIVE;
 8003072:	2308      	movs	r3, #8
 8003074:	73fb      	strb	r3, [r7, #15]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <BSP_MotorControl_GetDeviceState+0x44>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <BSP_MotorControl_GetDeviceState+0x32>
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <BSP_MotorControl_GetDeviceState+0x44>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <BSP_MotorControl_GetDeviceState+0x32>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <BSP_MotorControl_GetDeviceState+0x44>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	4610      	mov	r0, r2
 8003092:	4798      	blx	r3
 8003094:	4603      	mov	r3, r0
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	e003      	b.n	80030a2 <BSP_MotorControl_GetDeviceState+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 800309a:	f640 0009 	movw	r0, #2057	; 0x809
 800309e:	f7ff ff67 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }  
  return(state);   
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000204 	.word	0x20000204

080030b0 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <BSP_MotorControl_GetPosition+0x44>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <BSP_MotorControl_GetPosition+0x30>
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <BSP_MotorControl_GetPosition+0x44>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <BSP_MotorControl_GetPosition+0x44>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	79fa      	ldrb	r2, [r7, #7]
 80030d8:	4610      	mov	r0, r2
 80030da:	4798      	blx	r3
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e003      	b.n	80030e8 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 80030e0:	f640 000e 	movw	r0, #2062	; 0x80e
 80030e4:	f7ff ff44 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000204 	.word	0x20000204

080030f8 <BSP_MotorControl_GoHome>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoHome(uint8_t deviceId)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoHome != 0))
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <BSP_MotorControl_GoHome+0x3c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <BSP_MotorControl_GoHome+0x2a>
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <BSP_MotorControl_GoHome+0x3c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <BSP_MotorControl_GoHome+0x2a>
  {
    motorDrvHandle->GoHome(deviceId);
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <BSP_MotorControl_GoHome+0x3c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	79fa      	ldrb	r2, [r7, #7]
 800311c:	4610      	mov	r0, r2
 800311e:	4798      	blx	r3
 8003120:	e004      	b.n	800312c <BSP_MotorControl_GoHome+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(15);
 8003122:	f640 000f 	movw	r0, #2063	; 0x80f
 8003126:	f7ff ff23 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
} 
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000204 	.word	0x20000204

08003138 <BSP_MotorControl_GoMark>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoMark(uint8_t deviceId)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoMark != 0))
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <BSP_MotorControl_GoMark+0x3c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <BSP_MotorControl_GoMark+0x2a>
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <BSP_MotorControl_GoMark+0x3c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <BSP_MotorControl_GoMark+0x2a>
  {
    motorDrvHandle->GoMark(deviceId);
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <BSP_MotorControl_GoMark+0x3c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	79fa      	ldrb	r2, [r7, #7]
 800315c:	4610      	mov	r0, r2
 800315e:	4798      	blx	r3
 8003160:	e004      	b.n	800316c <BSP_MotorControl_GoMark+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(16);
 8003162:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8003166:	f7ff ff03 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }     
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000204 	.word	0x20000204

08003178 <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <BSP_MotorControl_GoTo+0x40>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <BSP_MotorControl_GoTo+0x2e>
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <BSP_MotorControl_GoTo+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <BSP_MotorControl_GoTo+0x2e>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <BSP_MotorControl_GoTo+0x40>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	79fa      	ldrb	r2, [r7, #7]
 800319e:	6839      	ldr	r1, [r7, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
 80031a4:	e004      	b.n	80031b0 <BSP_MotorControl_GoTo+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 80031a6:	f640 0011 	movw	r0, #2065	; 0x811
 80031aa:	f7ff fee1 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
}
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000204 	.word	0x20000204

080031bc <BSP_MotorControl_HardStop>:
 *            For L6208: dummy parameter for compatibility with motor.h
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardStop(uint8_t deviceId) 
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardStop != 0))
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <BSP_MotorControl_HardStop+0x3c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <BSP_MotorControl_HardStop+0x2a>
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <BSP_MotorControl_HardStop+0x3c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <BSP_MotorControl_HardStop+0x2a>
  {
    motorDrvHandle->HardStop(deviceId);
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <BSP_MotorControl_HardStop+0x3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031de:	79fa      	ldrb	r2, [r7, #7]
 80031e0:	4610      	mov	r0, r2
 80031e2:	4798      	blx	r3
 80031e4:	e004      	b.n	80031f0 <BSP_MotorControl_HardStop+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(18);
 80031e6:	f640 0012 	movw	r0, #2066	; 0x812
 80031ea:	f7ff fec1 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000204 	.word	0x20000204

080031fc <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	603a      	str	r2, [r7, #0]
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	460b      	mov	r3, r1
 800320a:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <BSP_MotorControl_Move+0x44>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00c      	beq.n	800322e <BSP_MotorControl_Move+0x32>
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <BSP_MotorControl_Move+0x44>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <BSP_MotorControl_Move+0x44>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003224:	79b9      	ldrb	r1, [r7, #6]
 8003226:	79f8      	ldrb	r0, [r7, #7]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4798      	blx	r3
 800322c:	e004      	b.n	8003238 <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 800322e:	f640 0013 	movw	r0, #2067	; 0x813
 8003232:	f7ff fe9d 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000204 	.word	0x20000204

08003244 <BSP_MotorControl_Run>:
 * @retval None
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	460a      	mov	r2, r1
 800324e:	71fb      	strb	r3, [r7, #7]
 8003250:	4613      	mov	r3, r2
 8003252:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <BSP_MotorControl_Run+0x44>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <BSP_MotorControl_Run+0x32>
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <BSP_MotorControl_Run+0x44>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <BSP_MotorControl_Run+0x32>
  {
    motorDrvHandle->Run(deviceId, direction); 
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <BSP_MotorControl_Run+0x44>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	79b9      	ldrb	r1, [r7, #6]
 800326e:	79fa      	ldrb	r2, [r7, #7]
 8003270:	4610      	mov	r0, r2
 8003272:	4798      	blx	r3
 8003274:	e004      	b.n	8003280 <BSP_MotorControl_Run+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 8003276:	f640 0015 	movw	r0, #2069	; 0x815
 800327a:	f7ff fe79 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000204 	.word	0x20000204

0800328c <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	460a      	mov	r2, r1
 8003296:	71fb      	strb	r3, [r7, #7]
 8003298:	4613      	mov	r3, r2
 800329a:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <BSP_MotorControl_SetAcceleration+0x4c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <BSP_MotorControl_SetAcceleration+0x3a>
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <BSP_MotorControl_SetAcceleration+0x4c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <BSP_MotorControl_SetAcceleration+0x3a>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <BSP_MotorControl_SetAcceleration+0x4c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	88b9      	ldrh	r1, [r7, #4]
 80032ba:	79fa      	ldrb	r2, [r7, #7]
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e003      	b.n	80032ce <BSP_MotorControl_SetAcceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 80032c6:	f640 0016 	movw	r0, #2070	; 0x816
 80032ca:	f7ff fe51 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
}            
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000204 	.word	0x20000204

080032dc <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	460a      	mov	r2, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <BSP_MotorControl_SetDeceleration+0x4c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <BSP_MotorControl_SetDeceleration+0x3a>
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <BSP_MotorControl_SetDeceleration+0x4c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <BSP_MotorControl_SetDeceleration+0x3a>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	88b9      	ldrh	r1, [r7, #4]
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	4610      	mov	r0, r2
 800330e:	4798      	blx	r3
 8003310:	4603      	mov	r3, r0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e003      	b.n	800331e <BSP_MotorControl_SetDeceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 8003316:	f640 0017 	movw	r0, #2071	; 0x817
 800331a:	f7ff fe29 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}        
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000204 	.word	0x20000204

0800332c <BSP_MotorControl_SetHome>:
 * @param[in] homePosition new absolute home position 
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetHome(uint8_t deviceId, int32_t homePosition)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetHome != 0))
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <BSP_MotorControl_SetHome+0x40>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00c      	beq.n	800335a <BSP_MotorControl_SetHome+0x2e>
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <BSP_MotorControl_SetHome+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <BSP_MotorControl_SetHome+0x2e>
  {
    motorDrvHandle->SetHome(deviceId, homePosition);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <BSP_MotorControl_SetHome+0x40>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	79fa      	ldrb	r2, [r7, #7]
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	4610      	mov	r0, r2
 8003356:	4798      	blx	r3
 8003358:	e004      	b.n	8003364 <BSP_MotorControl_SetHome+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(24);
 800335a:	f640 0018 	movw	r0, #2072	; 0x818
 800335e:	f7ff fe07 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }        
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000204 	.word	0x20000204

08003370 <BSP_MotorControl_SetMark>:
 * @param[in] markPosition new absolute mark position 
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetMark(uint8_t deviceId, int32_t markPosition)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMark != 0))
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <BSP_MotorControl_SetMark+0x40>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <BSP_MotorControl_SetMark+0x2e>
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <BSP_MotorControl_SetMark+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <BSP_MotorControl_SetMark+0x2e>
  {
    motorDrvHandle->SetMark(deviceId, markPosition);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <BSP_MotorControl_SetMark+0x40>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003394:	79fa      	ldrb	r2, [r7, #7]
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
 800339c:	e004      	b.n	80033a8 <BSP_MotorControl_SetMark+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(25);
 800339e:	f640 0019 	movw	r0, #2073	; 0x819
 80033a2:	f7ff fde5 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }    
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000204 	.word	0x20000204

080033b4 <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	460a      	mov	r2, r1
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <BSP_MotorControl_SetMaxSpeed+0x3a>
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <BSP_MotorControl_SetMaxSpeed+0x3a>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e0:	88b9      	ldrh	r1, [r7, #4]
 80033e2:	79fa      	ldrb	r2, [r7, #7]
 80033e4:	4610      	mov	r0, r2
 80033e6:	4798      	blx	r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e003      	b.n	80033f6 <BSP_MotorControl_SetMaxSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 80033ee:	f640 001a 	movw	r0, #2074	; 0x81a
 80033f2:	f7ff fdbd 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000204 	.word	0x20000204

08003404 <BSP_MotorControl_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	460a      	mov	r2, r1
 800340e:	71fb      	strb	r3, [r7, #7]
 8003410:	4613      	mov	r3, r2
 8003412:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMinSpeed != 0))
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <BSP_MotorControl_SetMinSpeed+0x4c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <BSP_MotorControl_SetMinSpeed+0x3a>
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <BSP_MotorControl_SetMinSpeed+0x3a>
  {
    status = motorDrvHandle->SetMinSpeed(deviceId, newMinSpeed);
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <BSP_MotorControl_SetMinSpeed+0x4c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003430:	88b9      	ldrh	r1, [r7, #4]
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	4610      	mov	r0, r2
 8003436:	4798      	blx	r3
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e003      	b.n	8003446 <BSP_MotorControl_SetMinSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(27);
 800343e:	f640 001b 	movw	r0, #2075	; 0x81b
 8003442:	f7ff fd95 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }     
  
  return (status);  
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000204 	.word	0x20000204

08003454 <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
  bool status = FALSE;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <BSP_MotorControl_SoftStop+0x44>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <BSP_MotorControl_SoftStop+0x32>
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <BSP_MotorControl_SoftStop+0x44>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <BSP_MotorControl_SoftStop+0x32>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <BSP_MotorControl_SoftStop+0x44>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	79fa      	ldrb	r2, [r7, #7]
 800347c:	4610      	mov	r0, r2
 800347e:	4798      	blx	r3
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e003      	b.n	800348e <BSP_MotorControl_SoftStop+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 8003486:	f640 001c 	movw	r0, #2076	; 0x81c
 800348a:	f7ff fd71 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 800348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000204 	.word	0x20000204

0800349c <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <BSP_MotorControl_StepClockHandler+0x3c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <BSP_MotorControl_StepClockHandler+0x2a>
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <BSP_MotorControl_StepClockHandler+0x3c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <BSP_MotorControl_StepClockHandler+0x2a>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <BSP_MotorControl_StepClockHandler+0x3c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	79fa      	ldrb	r2, [r7, #7]
 80034c0:	4610      	mov	r0, r2
 80034c2:	4798      	blx	r3
 80034c4:	e004      	b.n	80034d0 <BSP_MotorControl_StepClockHandler+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 80034c6:	f640 001d 	movw	r0, #2077	; 0x81d
 80034ca:	f7ff fd51 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }   
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000204 	.word	0x20000204

080034dc <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <BSP_MotorControl_WaitWhileActive+0x3c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <BSP_MotorControl_WaitWhileActive+0x2a>
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <BSP_MotorControl_WaitWhileActive+0x3c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <BSP_MotorControl_WaitWhileActive+0x3c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fe:	79fa      	ldrb	r2, [r7, #7]
 8003500:	4610      	mov	r0, r2
 8003502:	4798      	blx	r3
 8003504:	e004      	b.n	8003510 <BSP_MotorControl_WaitWhileActive+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 8003506:	f640 001e 	movw	r0, #2078	; 0x81e
 800350a:	f7ff fd31 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }    
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000204 	.word	0x20000204

0800351c <BSP_MotorControl_CmdDisable>:
 * @note For brush DC motor, when input of different brigdes are parallelized 
 * together, the disabling of one bridge leads to the disabling
 * of the second one
 **********************************************************/
void BSP_MotorControl_CmdDisable(uint8_t deviceId)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdDisable != 0))
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <BSP_MotorControl_CmdDisable+0x3c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <BSP_MotorControl_CmdDisable+0x2a>
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <BSP_MotorControl_CmdDisable+0x3c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <BSP_MotorControl_CmdDisable+0x2a>
  {
    motorDrvHandle->CmdDisable(deviceId);
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <BSP_MotorControl_CmdDisable+0x3c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800353e:	79fa      	ldrb	r2, [r7, #7]
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
 8003544:	e004      	b.n	8003550 <BSP_MotorControl_CmdDisable+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(31);
 8003546:	f640 001f 	movw	r0, #2079	; 0x81f
 800354a:	f7ff fd11 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }    
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000204 	.word	0x20000204

0800355c <BSP_MotorControl_CmdGetParam>:
 * @param[in] param Register adress (BSP_MotorControl_ABS_POS, BSP_MotorControl_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t BSP_MotorControl_CmdGetParam(uint8_t deviceId,
                                      uint32_t param)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  uint32_t value = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetParam != 0))
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <BSP_MotorControl_CmdGetParam+0x4c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00f      	beq.n	8003594 <BSP_MotorControl_CmdGetParam+0x38>
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <BSP_MotorControl_CmdGetParam+0x4c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <BSP_MotorControl_CmdGetParam+0x38>
  {
    value = motorDrvHandle->CmdGetParam(deviceId, param);
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <BSP_MotorControl_CmdGetParam+0x4c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003588:	79fa      	ldrb	r2, [r7, #7]
 800358a:	6839      	ldr	r1, [r7, #0]
 800358c:	4610      	mov	r0, r2
 800358e:	4798      	blx	r3
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	e003      	b.n	800359c <BSP_MotorControl_CmdGetParam+0x40>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(33);
 8003594:	f640 0021 	movw	r0, #2081	; 0x821
 8003598:	f7ff fcea 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }       
  return (value);
 800359c:	68fb      	ldr	r3, [r7, #12]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000204 	.word	0x20000204

080035ac <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <BSP_MotorControl_CmdGetStatus+0x48>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00f      	beq.n	80035e2 <BSP_MotorControl_CmdGetStatus+0x36>
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <BSP_MotorControl_CmdGetStatus+0x48>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <BSP_MotorControl_CmdGetStatus+0x48>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	79fa      	ldrb	r2, [r7, #7]
 80035d8:	4610      	mov	r0, r2
 80035da:	4798      	blx	r3
 80035dc:	4603      	mov	r3, r0
 80035de:	81fb      	strh	r3, [r7, #14]
 80035e0:	e003      	b.n	80035ea <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80035e2:	f640 0022 	movw	r0, #2082	; 0x822
 80035e6:	f7ff fcc3 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80035ea:	89fb      	ldrh	r3, [r7, #14]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000204 	.word	0x20000204

080035f8 <BSP_MotorControl_SelectStepMode>:
 * @param[in] stepMode from full step to 1/16 microstep as specified in 
 * enum BSP_MotorControl_STEP_SEL_t
 * @retval true if the command is successfully executed, else false
 **********************************************************/
bool BSP_MotorControl_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMode)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	460a      	mov	r2, r1
 8003602:	71fb      	strb	r3, [r7, #7]
 8003604:	4613      	mov	r3, r2
 8003606:	71bb      	strb	r3, [r7, #6]
  bool value = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SelectStepMode != 0))
 800360c:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <BSP_MotorControl_SelectStepMode+0x50>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <BSP_MotorControl_SelectStepMode+0x3e>
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <BSP_MotorControl_SelectStepMode+0x50>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <BSP_MotorControl_SelectStepMode+0x3e>
  {
    value = motorDrvHandle->SelectStepMode(deviceId, stepMode);
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <BSP_MotorControl_SelectStepMode+0x50>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003628:	79b9      	ldrb	r1, [r7, #6]
 800362a:	79fa      	ldrb	r2, [r7, #7]
 800362c:	4610      	mov	r0, r2
 800362e:	4798      	blx	r3
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e003      	b.n	800363e <BSP_MotorControl_SelectStepMode+0x46>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(40);
 8003636:	f640 0028 	movw	r0, #2088	; 0x828
 800363a:	f7ff fc99 	bl	8002f70 <BSP_MotorControl_ErrorHandler>
  }
  return (value);
 800363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000204 	.word	0x20000204

0800364c <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	460a      	mov	r2, r1
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4613      	mov	r3, r2
 800365a:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 800365c:	4a40      	ldr	r2, [pc, #256]	; (8003760 <BSP_MotorControl_SetNbDevices+0x114>)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	f641 124a 	movw	r2, #6474	; 0x194a
 800366c:	4293      	cmp	r3, r2
 800366e:	d105      	bne.n	800367c <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003670:	f7fd fb0e 	bl	8000c90 <L6474_GetMotorHandle>
 8003674:	4603      	mov	r3, r0
 8003676:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e055      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003682:	f7ff fc11 	bl	8002ea8 <Powerstep01_GetMotorHandle>
 8003686:	4603      	mov	r3, r0
 8003688:	4a36      	ldr	r2, [pc, #216]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e04c      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	f641 023e 	movw	r2, #6206	; 0x183e
 8003694:	4293      	cmp	r3, r2
 8003696:	d105      	bne.n	80036a4 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003698:	f7ff fc0e 	bl	8002eb8 <L6206_GetMotorHandle>
 800369c:	4603      	mov	r3, r0
 800369e:	4a31      	ldr	r2, [pc, #196]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e041      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80036aa:	d105      	bne.n	80036b8 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80036ac:	f7ff fc0c 	bl	8002ec8 <L6208_GetMotorHandle>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e037      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2bdc      	cmp	r3, #220	; 0xdc
 80036bc:	d105      	bne.n	80036ca <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 80036be:	f7ff fc0b 	bl	8002ed8 <Stspin220_GetMotorHandle>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e02e      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	f641 1246 	movw	r2, #6470	; 0x1946
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <BSP_MotorControl_SetNbDevices+0x92>
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	f641 1248 	movw	r2, #6472	; 0x1948
 80036da:	4293      	cmp	r3, r2
 80036dc:	d105      	bne.n	80036ea <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 80036de:	f7ff fbd3 	bl	8002e88 <l647x_GetMotorHandle>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e01e      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	f641 1250 	movw	r2, #6480	; 0x1950
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <BSP_MotorControl_SetNbDevices+0xb2>
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	f641 1252 	movw	r2, #6482	; 0x1952
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d105      	bne.n	800370a <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 80036fe:	f7ff fbcb 	bl	8002e98 <l648x_GetMotorHandle>
 8003702:	4603      	mov	r3, r0
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e00e      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2bf0      	cmp	r3, #240	; 0xf0
 800370e:	d002      	beq.n	8003716 <BSP_MotorControl_SetNbDevices+0xca>
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	2bfa      	cmp	r3, #250	; 0xfa
 8003714:	d105      	bne.n	8003722 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003716:	f7ff fbe7 	bl	8002ee8 <Stspin240_250_GetMotorHandle>
 800371a:	4603      	mov	r3, r0
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e002      	b.n	8003728 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d011      	beq.n	8003754 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 800373c:	797b      	ldrb	r3, [r7, #5]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <BSP_MotorControl_SetNbDevices+0x118>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800374a:	797a      	ldrb	r2, [r7, #5]
 800374c:	4610      	mov	r0, r2
 800374e:	4798      	blx	r3
 8003750:	4603      	mov	r3, r0
 8003752:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000208 	.word	0x20000208
 8003764:	20000204 	.word	0x20000204

08003768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <SystemInit+0x60>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <SystemInit+0x60>)
 8003774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <SystemInit+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a12      	ldr	r2, [pc, #72]	; (80037cc <SystemInit+0x64>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <SystemInit+0x64>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <SystemInit+0x64>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <SystemInit+0x64>)
 8003794:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <SystemInit+0x64>)
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <SystemInit+0x68>)
 80037a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <SystemInit+0x64>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <SystemInit+0x64>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <SystemInit+0x64>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <SystemInit+0x60>)
 80037b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037bc:	609a      	str	r2, [r3, #8]
#endif
}
 80037be:	bf00      	nop
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00
 80037cc:	40023800 	.word	0x40023800
 80037d0:	24003010 	.word	0x24003010

080037d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_Init+0x40>)
 80037de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <HAL_Init+0x40>)
 80037ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_Init+0x40>)
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fc:	2003      	movs	r0, #3
 80037fe:	f000 f953 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003802:	200f      	movs	r0, #15
 8003804:	f000 f810 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003808:	f000 f806 	bl	8003818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023c00 	.word	0x40023c00

08003818 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_InitTick+0x54>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_InitTick+0x58>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f963 	bl	8003b12 <HAL_SYSTICK_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00e      	b.n	8003874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d80a      	bhi.n	8003872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	2200      	movs	r2, #0
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 f92b 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003868:	4a06      	ldr	r2, [pc, #24]	; (8003884 <HAL_InitTick+0x5c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000164 	.word	0x20000164
 8003880:	2000016c 	.word	0x2000016c
 8003884:	20000168 	.word	0x20000168

08003888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x20>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_IncTick+0x24>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	; (80038ac <HAL_IncTick+0x24>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	2000016c 	.word	0x2000016c
 80038ac:	20000340 	.word	0x20000340

080038b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_GetTick+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000340 	.word	0x20000340

080038c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7ff ffee 	bl	80038b0 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d005      	beq.n	80038ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_Delay+0x44>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ee:	bf00      	nop
 80038f0:	f7ff ffde 	bl	80038b0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8f7      	bhi.n	80038f0 <HAL_Delay+0x28>
  {
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000016c 	.word	0x2000016c

08003910 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <NVIC_EnableIRQ+0x30>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da0b      	bge.n	80039d4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <NVIC_SetPriority+0x4c>)
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	3b04      	subs	r3, #4
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d2:	e009      	b.n	80039e8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <NVIC_SetPriority+0x50>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	440b      	add	r3, r1
 80039e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00
 80039f8:	e000e100 	.word	0xe000e100

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff8e 	bl	80039a8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff2d 	bl	8003910 <NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff42 	bl	8003958 <NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff8e 	bl	80039fc <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff35 	bl	8003974 <NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa2 	bl	8003a64 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e159      	b.n	8003dfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b48:	2201      	movs	r2, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	f040 8148 	bne.w	8003df6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x4a>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b12      	cmp	r3, #18
 8003b74:	d123      	bne.n	8003bbe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d00b      	beq.n	8003c12 <HAL_GPIO_Init+0xe6>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d007      	beq.n	8003c12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c06:	2b11      	cmp	r3, #17
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b12      	cmp	r3, #18
 8003c10:	d130      	bne.n	8003c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c48:	2201      	movs	r2, #1
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 0201 	and.w	r2, r3, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a2 	beq.w	8003df6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cce:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_GPIO_Init+0x2ec>)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a49      	ldr	r2, [pc, #292]	; (8003e1c <HAL_GPIO_Init+0x2f0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d019      	beq.n	8003d2e <HAL_GPIO_Init+0x202>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a48      	ldr	r2, [pc, #288]	; (8003e20 <HAL_GPIO_Init+0x2f4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_GPIO_Init+0x1fe>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a47      	ldr	r2, [pc, #284]	; (8003e24 <HAL_GPIO_Init+0x2f8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00d      	beq.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <HAL_GPIO_Init+0x2fc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d007      	beq.n	8003d22 <HAL_GPIO_Init+0x1f6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a45      	ldr	r2, [pc, #276]	; (8003e2c <HAL_GPIO_Init+0x300>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_GPIO_Init+0x1f2>
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e008      	b.n	8003d30 <HAL_GPIO_Init+0x204>
 8003d1e:	2307      	movs	r3, #7
 8003d20:	e006      	b.n	8003d30 <HAL_GPIO_Init+0x204>
 8003d22:	2303      	movs	r3, #3
 8003d24:	e004      	b.n	8003d30 <HAL_GPIO_Init+0x204>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e002      	b.n	8003d30 <HAL_GPIO_Init+0x204>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_GPIO_Init+0x204>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f002 0203 	and.w	r2, r2, #3
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d40:	4935      	ldr	r1, [pc, #212]	; (8003e18 <HAL_GPIO_Init+0x2ec>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d4e:	4b38      	ldr	r3, [pc, #224]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d72:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d78:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9c:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dc6:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003df0:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <HAL_GPIO_Init+0x304>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	f67f aea2 	bls.w	8003b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40020400 	.word	0x40020400
 8003e24:	40020800 	.word	0x40020800
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40013c00 	.word	0x40013c00

08003e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e001      	b.n	8003e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	405a      	eors	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	615a      	str	r2, [r3, #20]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 ff8c 	bl	8005df8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e22d      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d075      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f0a:	4ba3      	ldr	r3, [pc, #652]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d00c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f16:	4ba0      	ldr	r3, [pc, #640]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d112      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f22:	4b9d      	ldr	r3, [pc, #628]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	4b99      	ldr	r3, [pc, #612]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d05b      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x108>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d157      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e208      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x74>
 8003f52:	4b91      	ldr	r3, [pc, #580]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a90      	ldr	r2, [pc, #576]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0xb0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x98>
 8003f6a:	4b8b      	ldr	r3, [pc, #556]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a8a      	ldr	r2, [pc, #552]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a87      	ldr	r2, [pc, #540]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0xb0>
 8003f84:	4b84      	ldr	r3, [pc, #528]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a83      	ldr	r2, [pc, #524]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b81      	ldr	r3, [pc, #516]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a80      	ldr	r2, [pc, #512]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7ff fc84 	bl	80038b0 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fac:	f7ff fc80 	bl	80038b0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1cd      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0xc0>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7ff fc70 	bl	80038b0 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7ff fc6c 	bl	80038b0 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e1b9      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe6:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xe8>
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d063      	beq.n	80040ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004002:	4b65      	ldr	r3, [pc, #404]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b62      	ldr	r3, [pc, #392]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004016:	2b08      	cmp	r3, #8
 8004018:	d11c      	bne.n	8004054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401a:	4b5f      	ldr	r3, [pc, #380]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x152>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e18d      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4b56      	ldr	r3, [pc, #344]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4952      	ldr	r1, [pc, #328]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	e03a      	b.n	80040ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405c:	4b4f      	ldr	r3, [pc, #316]	; (800419c <HAL_RCC_OscConfig+0x2b0>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7ff fc25 	bl	80038b0 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406a:	f7ff fc21 	bl	80038b0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e16e      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407c:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b43      	ldr	r3, [pc, #268]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4940      	ldr	r1, [pc, #256]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409e:	4b3f      	ldr	r3, [pc, #252]	; (800419c <HAL_RCC_OscConfig+0x2b0>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7ff fc04 	bl	80038b0 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ac:	f7ff fc00 	bl	80038b0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e14d      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d030      	beq.n	8004138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040de:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <HAL_RCC_OscConfig+0x2b4>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7ff fbe4 	bl	80038b0 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ec:	f7ff fbe0 	bl	80038b0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e12d      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x200>
 800410a:	e015      	b.n	8004138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800410c:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_RCC_OscConfig+0x2b4>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004112:	f7ff fbcd 	bl	80038b0 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411a:	f7ff fbc9 	bl	80038b0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e116      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80a0 	beq.w	8004286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_OscConfig+0x2b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d121      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_RCC_OscConfig+0x2b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <HAL_RCC_OscConfig+0x2b8>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7ff fb8f 	bl	80038b0 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e011      	b.n	80041ba <HAL_RCC_OscConfig+0x2ce>
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	42470000 	.word	0x42470000
 80041a0:	42470e80 	.word	0x42470e80
 80041a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7ff fb82 	bl	80038b0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0cf      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCC_OscConfig+0x478>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x2f0>
 80041ce:	4b66      	ldr	r3, [pc, #408]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a65      	ldr	r2, [pc, #404]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	e01c      	b.n	8004216 <HAL_RCC_OscConfig+0x32a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x312>
 80041e4:	4b60      	ldr	r3, [pc, #384]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a5f      	ldr	r2, [pc, #380]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	4b5d      	ldr	r3, [pc, #372]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a5c      	ldr	r2, [pc, #368]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x32a>
 80041fe:	4b5a      	ldr	r3, [pc, #360]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a59      	ldr	r2, [pc, #356]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	4b57      	ldr	r3, [pc, #348]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a56      	ldr	r2, [pc, #344]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d015      	beq.n	800424a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7ff fb47 	bl	80038b0 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7ff fb43 	bl	80038b0 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e08e      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCC_OscConfig+0x33a>
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424a:	f7ff fb31 	bl	80038b0 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7ff fb2d 	bl	80038b0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e078      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	4b3f      	ldr	r3, [pc, #252]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d064      	beq.n	8004358 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800428e:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d05c      	beq.n	8004354 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d141      	bne.n	8004326 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_RCC_OscConfig+0x480>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7ff fb02 	bl	80038b0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b0:	f7ff fafe 	bl	80038b0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04b      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69da      	ldr	r2, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	491d      	ldr	r1, [pc, #116]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <HAL_RCC_OscConfig+0x480>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7ff fad7 	bl	80038b0 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004306:	f7ff fad3 	bl	80038b0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e020      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x41a>
 8004324:	e018      	b.n	8004358 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_RCC_OscConfig+0x480>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7ff fac0 	bl	80038b0 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004334:	f7ff fabc 	bl	80038b0 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e009      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_RCC_OscConfig+0x47c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x448>
 8004352:	e001      	b.n	8004358 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40007000 	.word	0x40007000
 8004368:	40023800 	.word	0x40023800
 800436c:	42470060 	.word	0x42470060

08004370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0ca      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004384:	4b67      	ldr	r3, [pc, #412]	; (8004524 <HAL_RCC_ClockConfig+0x1b4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d90c      	bls.n	80043ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b64      	ldr	r3, [pc, #400]	; (8004524 <HAL_RCC_ClockConfig+0x1b4>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCC_ClockConfig+0x1b4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b6      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c4:	4b58      	ldr	r3, [pc, #352]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4a57      	ldr	r2, [pc, #348]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043dc:	4b52      	ldr	r3, [pc, #328]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a51      	ldr	r2, [pc, #324]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80043e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b4f      	ldr	r3, [pc, #316]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	494c      	ldr	r1, [pc, #304]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d044      	beq.n	8004490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d119      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07d      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d003      	beq.n	800442e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442a:	2b03      	cmp	r3, #3
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	4b3e      	ldr	r3, [pc, #248]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06d      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e065      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4933      	ldr	r1, [pc, #204]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004460:	f7ff fa26 	bl	80038b0 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7ff fa22 	bl	80038b0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e04d      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 020c 	and.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	429a      	cmp	r2, r3
 800448e:	d1eb      	bne.n	8004468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_ClockConfig+0x1b4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d20c      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCC_ClockConfig+0x1b4>)
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCC_ClockConfig+0x1b4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e030      	b.n	800451a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c4:	4b18      	ldr	r3, [pc, #96]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4915      	ldr	r1, [pc, #84]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	490d      	ldr	r1, [pc, #52]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044f6:	f000 f81d 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	4909      	ldr	r1, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	5ccb      	ldrb	r3, [r1, r3]
 800450a:	fa22 f303 	lsr.w	r3, r2, r3
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004512:	200f      	movs	r0, #15
 8004514:	f7ff f988 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023c00 	.word	0x40023c00
 8004528:	40023800 	.word	0x40023800
 800452c:	08005f74 	.word	0x08005f74
 8004530:	20000164 	.word	0x20000164

08004534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	b5b0      	push	{r4, r5, r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800453a:	2100      	movs	r1, #0
 800453c:	6079      	str	r1, [r7, #4]
 800453e:	2100      	movs	r1, #0
 8004540:	60f9      	str	r1, [r7, #12]
 8004542:	2100      	movs	r1, #0
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004546:	2100      	movs	r1, #0
 8004548:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800454a:	4952      	ldr	r1, [pc, #328]	; (8004694 <HAL_RCC_GetSysClockFreq+0x160>)
 800454c:	6889      	ldr	r1, [r1, #8]
 800454e:	f001 010c 	and.w	r1, r1, #12
 8004552:	2908      	cmp	r1, #8
 8004554:	d00d      	beq.n	8004572 <HAL_RCC_GetSysClockFreq+0x3e>
 8004556:	2908      	cmp	r1, #8
 8004558:	f200 8094 	bhi.w	8004684 <HAL_RCC_GetSysClockFreq+0x150>
 800455c:	2900      	cmp	r1, #0
 800455e:	d002      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x32>
 8004560:	2904      	cmp	r1, #4
 8004562:	d003      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x38>
 8004564:	e08e      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004566:	4b4c      	ldr	r3, [pc, #304]	; (8004698 <HAL_RCC_GetSysClockFreq+0x164>)
 8004568:	60bb      	str	r3, [r7, #8]
       break;
 800456a:	e08e      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCC_GetSysClockFreq+0x168>)
 800456e:	60bb      	str	r3, [r7, #8]
      break;
 8004570:	e08b      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004572:	4948      	ldr	r1, [pc, #288]	; (8004694 <HAL_RCC_GetSysClockFreq+0x160>)
 8004574:	6849      	ldr	r1, [r1, #4]
 8004576:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800457a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800457c:	4945      	ldr	r1, [pc, #276]	; (8004694 <HAL_RCC_GetSysClockFreq+0x160>)
 800457e:	6849      	ldr	r1, [r1, #4]
 8004580:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004584:	2900      	cmp	r1, #0
 8004586:	d024      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004588:	4942      	ldr	r1, [pc, #264]	; (8004694 <HAL_RCC_GetSysClockFreq+0x160>)
 800458a:	6849      	ldr	r1, [r1, #4]
 800458c:	0989      	lsrs	r1, r1, #6
 800458e:	4608      	mov	r0, r1
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004598:	f04f 0500 	mov.w	r5, #0
 800459c:	ea00 0204 	and.w	r2, r0, r4
 80045a0:	ea01 0305 	and.w	r3, r1, r5
 80045a4:	493d      	ldr	r1, [pc, #244]	; (800469c <HAL_RCC_GetSysClockFreq+0x168>)
 80045a6:	fb01 f003 	mul.w	r0, r1, r3
 80045aa:	2100      	movs	r1, #0
 80045ac:	fb01 f102 	mul.w	r1, r1, r2
 80045b0:	1844      	adds	r4, r0, r1
 80045b2:	493a      	ldr	r1, [pc, #232]	; (800469c <HAL_RCC_GetSysClockFreq+0x168>)
 80045b4:	fba2 0101 	umull	r0, r1, r2, r1
 80045b8:	1863      	adds	r3, r4, r1
 80045ba:	4619      	mov	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	461a      	mov	r2, r3
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	f7fb fe06 	bl	80001d4 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e04a      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <HAL_RCC_GetSysClockFreq+0x160>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	461a      	mov	r2, r3
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	ea02 0400 	and.w	r4, r2, r0
 80045ea:	ea03 0501 	and.w	r5, r3, r1
 80045ee:	4620      	mov	r0, r4
 80045f0:	4629      	mov	r1, r5
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	014b      	lsls	r3, r1, #5
 80045fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004600:	0142      	lsls	r2, r0, #5
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	1b00      	subs	r0, r0, r4
 8004608:	eb61 0105 	sbc.w	r1, r1, r5
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	018b      	lsls	r3, r1, #6
 8004616:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800461a:	0182      	lsls	r2, r0, #6
 800461c:	1a12      	subs	r2, r2, r0
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	00d9      	lsls	r1, r3, #3
 800462c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004630:	00d0      	lsls	r0, r2, #3
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	1912      	adds	r2, r2, r4
 8004638:	eb45 0303 	adc.w	r3, r5, r3
 800463c:	f04f 0000 	mov.w	r0, #0
 8004640:	f04f 0100 	mov.w	r1, #0
 8004644:	0299      	lsls	r1, r3, #10
 8004646:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800464a:	0290      	lsls	r0, r2, #10
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4610      	mov	r0, r2
 8004652:	4619      	mov	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	461a      	mov	r2, r3
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	f7fb fdba 	bl	80001d4 <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4613      	mov	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <HAL_RCC_GetSysClockFreq+0x160>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	3301      	adds	r3, #1
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	60bb      	str	r3, [r7, #8]
      break;
 8004682:	e002      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <HAL_RCC_GetSysClockFreq+0x164>)
 8004686:	60bb      	str	r3, [r7, #8]
      break;
 8004688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468a:	68bb      	ldr	r3, [r7, #8]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bdb0      	pop	{r4, r5, r7, pc}
 8004694:	40023800 	.word	0x40023800
 8004698:	00f42400 	.word	0x00f42400
 800469c:	017d7840 	.word	0x017d7840

080046a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e05d      	b.n	800476e <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fa40 	bl	8005b4c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	ea42 0103 	orr.w	r1, r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	f003 0104 	and.w	r1, r3, #4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004742:	d104      	bne.n	800474e <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800474c:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475c:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08e      	sub	sp, #56	; 0x38
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8004794:	2301      	movs	r3, #1
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x36>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e1f2      	b.n	8004b92 <HAL_SPI_TransmitReceive+0x41c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b4:	f7ff f87c 	bl	80038b0 <HAL_GetTick>
 80047b8:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d00e      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x78>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d6:	d106      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <HAL_SPI_TransmitReceive+0x70>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d003      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047ec:	e1c7      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_SPI_TransmitReceive+0x8a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_SPI_TransmitReceive+0x8a>
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004806:	e1ba      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d103      	bne.n	800481c <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2205      	movs	r2, #5
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	887a      	ldrh	r2, [r7, #2]
 8004832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	887a      	ldrh	r2, [r7, #2]
 8004844:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485a:	d110      	bne.n	800487e <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800486a:	400b      	ands	r3, r1
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800487c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d007      	beq.n	800489c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a4:	f040 8084 	bne.w	80049b0 <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x144>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d16f      	bne.n	800499a <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3302      	adds	r3, #2
 80048c8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d8:	e05f      	b.n	800499a <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d02e      	beq.n	800493e <HAL_SPI_TransmitReceive+0x1c8>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d029      	beq.n	800493e <HAL_SPI_TransmitReceive+0x1c8>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d122      	bne.n	800493e <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	881a      	ldrh	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3302      	adds	r3, #2
 8004906:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10c      	bne.n	800493e <HAL_SPI_TransmitReceive+0x1c8>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d107      	bne.n	800493e <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800493c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d018      	beq.n	800497a <HAL_SPI_TransmitReceive+0x204>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d111      	bne.n	800497a <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3302      	adds	r3, #2
 8004966:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8004976:	2301      	movs	r3, #1
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d00b      	beq.n	800499a <HAL_SPI_TransmitReceive+0x224>
 8004982:	f7fe ff95 	bl	80038b0 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498e:	429a      	cmp	r2, r3
 8004990:	d803      	bhi.n	800499a <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004998:	e0f1      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d19a      	bne.n	80048da <HAL_SPI_TransmitReceive+0x164>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d195      	bne.n	80048da <HAL_SPI_TransmitReceive+0x164>
 80049ae:	e082      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0x24c>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d16f      	bne.n	8004aa2 <HAL_SPI_TransmitReceive+0x32c>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e2:	e05e      	b.n	8004aa2 <HAL_SPI_TransmitReceive+0x32c>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02e      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x2d2>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d029      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x2d2>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d122      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	60ba      	str	r2, [r7, #8]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	320c      	adds	r2, #12
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x2d2>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a36:	d107      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x2d2>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a46:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d017      	beq.n	8004a82 <HAL_SPI_TransmitReceive+0x30c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d110      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x30c>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68d9      	ldr	r1, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	b2ca      	uxtb	r2, r1
 8004a6e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a88:	d00b      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x32c>
 8004a8a:	f7fe ff11 	bl	80038b0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_TransmitReceive+0x32c>
      {
        errorcode = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004aa0:	e06d      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d19b      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x26e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d196      	bne.n	80049e4 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	d11a      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x380>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	2101      	movs	r1, #1
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f865 	bl	8004b9a <SPI_WaitFlagStateUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x374>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	f043 0202 	orr.w	r2, r3, #2
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8004ae8:	e049      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8004af4:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d10d      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x3aa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	f043 0202 	orr.w	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004b18:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2201      	movs	r2, #1
 8004b28:	2102      	movs	r1, #2
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f835 	bl	8004b9a <SPI_WaitFlagStateUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x3c8>
  {
    errorcode = HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b3c:	e01f      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f892 	bl	8004c6c <SPI_CheckFlag_BSY>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b5a:	e010      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b64:	2300      	movs	r3, #0
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	e000      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x408>
  }
  
error :
 8004b7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004ba8:	e04d      	b.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d049      	beq.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004bb8:	f7fe fe7a 	bl	80038b0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d83e      	bhi.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bd6:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be0:	d111      	bne.n	8004c06 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d004      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d107      	bne.n	8004c06 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0e:	d110      	bne.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6819      	ldr	r1, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004c1e:	400b      	ands	r3, r1
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e00e      	b.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d101      	bne.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004c56:	2201      	movs	r2, #1
 8004c58:	e000      	b.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d1a3      	bne.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff ff89 	bl	8004b9a <SPI_WaitFlagStateUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e000      	b.n	8004ca0 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e01d      	b.n	8004cf6 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 ffac 	bl	8005c2c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 faba 	bl	8005260 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}  
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fb96 	bl	8005444 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <HAL_TIM_PWM_Stop+0x94>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d117      	bne.n	8004d52 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_TIM_PWM_Stop+0x52>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f240 4344 	movw	r3, #1092	; 0x444
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_PWM_Stop+0x52>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <HAL_TIM_PWM_Stop+0x82>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f240 4344 	movw	r3, #1092	; 0x444
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <HAL_TIM_PWM_Stop+0x82>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
} 
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40010000 	.word	0x40010000

08004d98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d841      	bhi.n	8004e2c <HAL_TIM_PWM_Start_IT+0x94>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_TIM_PWM_Start_IT+0x18>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004e2d 	.word	0x08004e2d
 8004db8:	08004e2d 	.word	0x08004e2d
 8004dbc:	08004e2d 	.word	0x08004e2d
 8004dc0:	08004df7 	.word	0x08004df7
 8004dc4:	08004e2d 	.word	0x08004e2d
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004e2d 	.word	0x08004e2d
 8004dd0:	08004e09 	.word	0x08004e09
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004e1b 	.word	0x08004e1b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0202 	orr.w	r2, r2, #2
 8004df2:	60da      	str	r2, [r3, #12]
    }
    break;
 8004df4:	e01b      	b.n	8004e2e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0204 	orr.w	r2, r2, #4
 8004e04:	60da      	str	r2, [r3, #12]
    }
    break;
 8004e06:	e012      	b.n	8004e2e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	60da      	str	r2, [r3, #12]
    }
    break;
 8004e18:	e009      	b.n	8004e2e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0210 	orr.w	r2, r2, #16
 8004e28:	60da      	str	r2, [r3, #12]
    }
    break;
 8004e2a:	e000      	b.n	8004e2e <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 8004e2c:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fb04 	bl	8005444 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <HAL_TIM_PWM_Start_IT+0xd8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d107      	bne.n	8004e56 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
} 
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40010000 	.word	0x40010000

08004e74 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0202 	mvn.w	r2, #2
 8004ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f9be 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9b0 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 ff45 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0204 	mvn.w	r2, #4
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f994 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f986 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ff1b 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0208 	mvn.w	r2, #8
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f96a 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f95c 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fef1 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0210 	mvn.w	r2, #16
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f940 	bl	8005238 <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f932 	bl	8005224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fec7 	bl	8005d54 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0201 	mvn.w	r2, #1
 8004ff0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f90c 	bl	8005210 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d107      	bne.n	8005024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800501c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fbad 	bl	800577e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005048:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f8fe 	bl	800524c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	d10e      	bne.n	800507c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b20      	cmp	r3, #32
 800506a:	d107      	bne.n	800507c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0220 	mvn.w	r2, #32
 8005074:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb77 	bl	800576a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800509a:	2302      	movs	r3, #2
 800509c:	e0b4      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x184>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	f200 809f 	bhi.w	80051f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050f1 	.word	0x080050f1
 80050c0:	080051f5 	.word	0x080051f5
 80050c4:	080051f5 	.word	0x080051f5
 80050c8:	080051f5 	.word	0x080051f5
 80050cc:	08005131 	.word	0x08005131
 80050d0:	080051f5 	.word	0x080051f5
 80050d4:	080051f5 	.word	0x080051f5
 80050d8:	080051f5 	.word	0x080051f5
 80050dc:	08005173 	.word	0x08005173
 80050e0:	080051f5 	.word	0x080051f5
 80050e4:	080051f5 	.word	0x080051f5
 80050e8:	080051f5 	.word	0x080051f5
 80050ec:	080051b3 	.word	0x080051b3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f9c8 	bl	800548c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0204 	bic.w	r2, r2, #4
 800511a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6999      	ldr	r1, [r3, #24]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	619a      	str	r2, [r3, #24]
    }
    break;
 800512e:	e062      	b.n	80051f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f916 	bl	8005368 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6999      	ldr	r1, [r3, #24]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	619a      	str	r2, [r3, #24]
    }
    break;
 8005170:	e041      	b.n	80051f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f9ef 	bl	800555c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0208 	orr.w	r2, r2, #8
 800518c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0204 	bic.w	r2, r2, #4
 800519c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69d9      	ldr	r1, [r3, #28]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	61da      	str	r2, [r3, #28]
    }
    break;
 80051b0:	e021      	b.n	80051f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fa3b 	bl	8005634 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051cc:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69d9      	ldr	r1, [r3, #28]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	021a      	lsls	r2, r3, #8
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	61da      	str	r2, [r3, #28]
    }
    break;
 80051f2:	e000      	b.n	80051f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80051f4:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a35      	ldr	r2, [pc, #212]	; (800534c <TIM_Base_SetConfig+0xec>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00f      	beq.n	800529c <TIM_Base_SetConfig+0x3c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d00b      	beq.n	800529c <TIM_Base_SetConfig+0x3c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a32      	ldr	r2, [pc, #200]	; (8005350 <TIM_Base_SetConfig+0xf0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_Base_SetConfig+0x3c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a31      	ldr	r2, [pc, #196]	; (8005354 <TIM_Base_SetConfig+0xf4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0x3c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a30      	ldr	r2, [pc, #192]	; (8005358 <TIM_Base_SetConfig+0xf8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <TIM_Base_SetConfig+0x40>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <TIM_Base_SetConfig+0x42>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d008      	beq.n	80052b8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a24      	ldr	r2, [pc, #144]	; (800534c <TIM_Base_SetConfig+0xec>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d01b      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d017      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <TIM_Base_SetConfig+0xf0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a20      	ldr	r2, [pc, #128]	; (8005354 <TIM_Base_SetConfig+0xf4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <TIM_Base_SetConfig+0xf8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <TIM_Base_SetConfig+0xfc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <TIM_Base_SetConfig+0x100>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x98>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <TIM_Base_SetConfig+0x104>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <TIM_Base_SetConfig+0x9c>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <TIM_Base_SetConfig+0x9e>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a07      	ldr	r2, [pc, #28]	; (800534c <TIM_Base_SetConfig+0xec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d103      	bne.n	800533a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	615a      	str	r2, [r3, #20]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40010000 	.word	0x40010000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800

08005368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0210 	bic.w	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053aa:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0320 	bic.w	r3, r3, #32
 80053be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <TIM_OC2_SetConfig+0xd8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d121      	bne.n	8005418 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ee:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000

08005444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005454:	2201      	movs	r2, #1
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	43db      	mvns	r3, r3
 8005466:	401a      	ands	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	431a      	orrs	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 0302 	bic.w	r3, r3, #2
 80054e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <TIM_OC1_SetConfig+0xcc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d11e      	bne.n	8005532 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f023 0308 	bic.w	r3, r3, #8
 80054fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
} 
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40010000 	.word	0x40010000

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <TIM_OC3_SetConfig+0xd4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d121      	bne.n	800560a <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e0:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40010000 	.word	0x40010000

08005634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005676:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a10      	ldr	r2, [pc, #64]	; (80056dc <TIM_OC4_SetConfig+0xa8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000

080056e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e032      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005716:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005738:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6899      	ldr	r1, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
} 
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b094      	sub	sp, #80	; 0x50
 8005798:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	4b2a      	ldr	r3, [pc, #168]	; (8005848 <SystemClock_Config+0xb4>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	4a29      	ldr	r2, [pc, #164]	; (8005848 <SystemClock_Config+0xb4>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6413      	str	r3, [r2, #64]	; 0x40
 80057aa:	4b27      	ldr	r3, [pc, #156]	; (8005848 <SystemClock_Config+0xb4>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <SystemClock_Config+0xb8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80057c2:	4a22      	ldr	r2, [pc, #136]	; (800584c <SystemClock_Config+0xb8>)
 80057c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <SystemClock_Config+0xb8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057d6:	2302      	movs	r3, #2
 80057d8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057da:	2301      	movs	r3, #1
 80057dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80057de:	2310      	movs	r3, #16
 80057e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057e2:	2302      	movs	r3, #2
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80057e6:	2300      	movs	r3, #0
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80057ea:	2310      	movs	r3, #16
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80057ee:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80057f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80057f4:	2304      	movs	r3, #4
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80057f8:	2307      	movs	r3, #7
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fb73 	bl	8003eec <HAL_RCC_OscConfig>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SystemClock_Config+0x7e>
  {
    Error_Handler(0);
 800580c:	2000      	movs	r0, #0
 800580e:	f000 f991 	bl	8005b34 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005812:	230f      	movs	r3, #15
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005816:	2302      	movs	r3, #2
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800581a:	2300      	movs	r3, #0
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800581e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8005824:	2300      	movs	r3, #0
 8005826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800582c:	2102      	movs	r1, #2
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fd9e 	bl	8004370 <HAL_RCC_ClockConfig>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <SystemClock_Config+0xac>
  {
    Error_Handler(1);
 800583a:	2001      	movs	r0, #1
 800583c:	f000 f97a 	bl	8005b34 <Error_Handler>
  }
}
 8005840:	bf00      	nop
 8005842:	3750      	adds	r7, #80	; 0x50
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40023800 	.word	0x40023800
 800584c:	40007000 	.word	0x40007000

08005850 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
  int32_t pos;
  uint16_t mySpeed;

  /* STM32xx HAL library initialization */
  HAL_Init();
 8005856:	f7fd ffbd 	bl	80037d4 <HAL_Init>
  
  /* Configure the system clock */
  SystemClock_Config();
 800585a:	f7ff ff9b 	bl	8005794 <SystemClock_Config>
    
//----- Init of the Motor control library 
/* Set the L6474 library to use 1 device */
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6474, 1);
 800585e:	2101      	movs	r1, #1
 8005860:	f641 104a 	movw	r0, #6474	; 0x194a
 8005864:	f7fd fef2 	bl	800364c <BSP_MotorControl_SetNbDevices>
  /* whose Id is n-1.                                                         */
  /* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
  /* device with the structure gL6474InitParams declared in the the main.c file */
  /* and comment the subsequent call having the NULL pointer                   */
  //BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, &gL6474InitParams);
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, NULL);
 8005868:	2100      	movs	r1, #0
 800586a:	f641 104a 	movw	r0, #6474	; 0x194a
 800586e:	f7fd fb9d 	bl	8002fac <BSP_MotorControl_Init>
  
  /* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8005872:	48a7      	ldr	r0, [pc, #668]	; (8005b10 <main+0x2c0>)
 8005874:	f7fd fb5e 	bl	8002f34 <BSP_MotorControl_AttachFlagInterrupt>

  /* Attach the function Error_Handler (defined below) to the error Handler*/
  BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8005878:	48a6      	ldr	r0, [pc, #664]	; (8005b14 <main+0x2c4>)
 800587a:	f7fd fb3d 	bl	8002ef8 <BSP_MotorControl_AttachErrorHandler>
  
  //----- Move of 16000 steps in the FW direction
  /* Move device 0 of 16000 steps in the FORWARD direction*/
  BSP_MotorControl_Move(0, FORWARD, 16000);
 800587e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8005882:	2101      	movs	r1, #1
 8005884:	2000      	movs	r0, #0
 8005886:	f7fd fcb9 	bl	80031fc <BSP_MotorControl_Move>

  /* Wait for the motor of device 0 ends moving */
  BSP_MotorControl_WaitWhileActive(0);
 800588a:	2000      	movs	r0, #0
 800588c:	f7fd fe26 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Wait for 2 seconds */
  HAL_Delay(2000);  
 8005890:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005894:	f7fe f818 	bl	80038c8 <HAL_Delay>
  
//----- Move of 16000 steps in the BW direction

  /* Move device 0 of 16000 steps in the BACKWARD direction*/
  BSP_MotorControl_Move(0, BACKWARD, 16000);
 8005898:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800589c:	2100      	movs	r1, #0
 800589e:	2000      	movs	r0, #0
 80058a0:	f7fd fcac 	bl	80031fc <BSP_MotorControl_Move>

  /* Wait for the motor of device 0 ends moving */
  BSP_MotorControl_WaitWhileActive(0);
 80058a4:	2000      	movs	r0, #0
 80058a6:	f7fd fe19 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Get current position of device 0*/
  pos = BSP_MotorControl_GetPosition(0);
 80058aa:	2000      	movs	r0, #0
 80058ac:	f7fd fc00 	bl	80030b0 <BSP_MotorControl_GetPosition>
 80058b0:	6078      	str	r0, [r7, #4]
  
  /* Set the current position of device 0 to be the Home position */
  BSP_MotorControl_SetHome(0, pos);
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fd fd39 	bl	800332c <BSP_MotorControl_SetHome>
  
  /* Wait for 2 seconds */
  HAL_Delay(2000);
 80058ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80058be:	f7fe f803 	bl	80038c8 <HAL_Delay>

//----- Go to position -6400

  /* Request device 0 to go to position -6400 */
  BSP_MotorControl_GoTo(0,-6400);  
 80058c2:	4995      	ldr	r1, [pc, #596]	; (8005b18 <main+0x2c8>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	f7fd fc57 	bl	8003178 <BSP_MotorControl_GoTo>
  
  /* Wait for the motor ends moving */
  BSP_MotorControl_WaitWhileActive(0);
 80058ca:	2000      	movs	r0, #0
 80058cc:	f7fd fe06 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Get current position of device 0*/
  pos = BSP_MotorControl_GetPosition(0);
 80058d0:	2000      	movs	r0, #0
 80058d2:	f7fd fbed 	bl	80030b0 <BSP_MotorControl_GetPosition>
 80058d6:	6078      	str	r0, [r7, #4]

  if (pos != -6400) 
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f513 5fc8 	cmn.w	r3, #6400	; 0x1900
 80058de:	d002      	beq.n	80058e6 <main+0x96>
  {
    Error_Handler(11);
 80058e0:	200b      	movs	r0, #11
 80058e2:	f000 f927 	bl	8005b34 <Error_Handler>
  }
  
  /* Set the current position of device 0 to be the Mark position */
  BSP_MotorControl_SetMark(0, pos);
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fd fd41 	bl	8003370 <BSP_MotorControl_SetMark>

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 80058ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80058f2:	f7fd ffe9 	bl	80038c8 <HAL_Delay>
  
//----- Go Home

  /* Request device 0 to go to Home */
  BSP_MotorControl_GoHome(0);  
 80058f6:	2000      	movs	r0, #0
 80058f8:	f7fd fbfe 	bl	80030f8 <BSP_MotorControl_GoHome>
  BSP_MotorControl_WaitWhileActive(0);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f7fd fded 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Get current position of device 0 */
  pos = BSP_MotorControl_GetPosition(0);
 8005902:	2000      	movs	r0, #0
 8005904:	f7fd fbd4 	bl	80030b0 <BSP_MotorControl_GetPosition>
 8005908:	6078      	str	r0, [r7, #4]
  
  /* Wait for 2 seconds */
  HAL_Delay(2000);
 800590a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800590e:	f7fd ffdb 	bl	80038c8 <HAL_Delay>

//----- Go to position 6400

  /* Request device 0 to go to position 6400 */
  BSP_MotorControl_GoTo(0,6400);  
 8005912:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8005916:	2000      	movs	r0, #0
 8005918:	f7fd fc2e 	bl	8003178 <BSP_MotorControl_GoTo>
  
  /* Wait for the motor of device 0 ends moving */
  BSP_MotorControl_WaitWhileActive(0);
 800591c:	2000      	movs	r0, #0
 800591e:	f7fd fddd 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Get current position of device 0*/
  pos = BSP_MotorControl_GetPosition(0);
 8005922:	2000      	movs	r0, #0
 8005924:	f7fd fbc4 	bl	80030b0 <BSP_MotorControl_GetPosition>
 8005928:	6078      	str	r0, [r7, #4]

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 800592a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800592e:	f7fd ffcb 	bl	80038c8 <HAL_Delay>
  
//----- Go Mark which was set previously after go to -6400

  /* Request device 0 to go to Mark position */
  BSP_MotorControl_GoMark(0);  
 8005932:	2000      	movs	r0, #0
 8005934:	f7fd fc00 	bl	8003138 <BSP_MotorControl_GoMark>
  
  /* Wait for the motor of device 0 ends moving */
  BSP_MotorControl_WaitWhileActive(0);
 8005938:	2000      	movs	r0, #0
 800593a:	f7fd fdcf 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Get current position of device 0 */
  pos = BSP_MotorControl_GetPosition(0);
 800593e:	2000      	movs	r0, #0
 8005940:	f7fd fbb6 	bl	80030b0 <BSP_MotorControl_GetPosition>
 8005944:	6078      	str	r0, [r7, #4]

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 8005946:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800594a:	f7fd ffbd 	bl	80038c8 <HAL_Delay>

//----- Run the motor BACKWARD

  /* Request device 0 to run BACKWARD */
   BSP_MotorControl_Run(0,BACKWARD);       
 800594e:	2100      	movs	r1, #0
 8005950:	2000      	movs	r0, #0
 8005952:	f7fd fc77 	bl	8003244 <BSP_MotorControl_Run>
   HAL_Delay(5000);
 8005956:	f241 3088 	movw	r0, #5000	; 0x1388
 800595a:	f7fd ffb5 	bl	80038c8 <HAL_Delay>

   /* Get current speed of device 0 */
   mySpeed = BSP_MotorControl_GetCurrentSpeed(0);
 800595e:	2000      	movs	r0, #0
 8005960:	f7fd fb5e 	bl	8003020 <BSP_MotorControl_GetCurrentSpeed>
 8005964:	4603      	mov	r3, r0
 8005966:	807b      	strh	r3, [r7, #2]

//----- Increase the speed while running

  /* Increase speed of device 0 to 2400 step/s */
  BSP_MotorControl_SetMaxSpeed(0,2400);
 8005968:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800596c:	2000      	movs	r0, #0
 800596e:	f7fd fd21 	bl	80033b4 <BSP_MotorControl_SetMaxSpeed>
  HAL_Delay(5000);
 8005972:	f241 3088 	movw	r0, #5000	; 0x1388
 8005976:	f7fd ffa7 	bl	80038c8 <HAL_Delay>

   /* Get current speed of device 0 */
   mySpeed = BSP_MotorControl_GetCurrentSpeed(0);
 800597a:	2000      	movs	r0, #0
 800597c:	f7fd fb50 	bl	8003020 <BSP_MotorControl_GetCurrentSpeed>
 8005980:	4603      	mov	r3, r0
 8005982:	807b      	strh	r3, [r7, #2]

//----- Decrease the speed while running

  /* Decrease speed of device 0 to 1200 step/s */
  BSP_MotorControl_SetMaxSpeed(0,1200);
 8005984:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005988:	2000      	movs	r0, #0
 800598a:	f7fd fd13 	bl	80033b4 <BSP_MotorControl_SetMaxSpeed>
  HAL_Delay(5000);
 800598e:	f241 3088 	movw	r0, #5000	; 0x1388
 8005992:	f7fd ff99 	bl	80038c8 <HAL_Delay>

  /* Get current speed */
  mySpeed = BSP_MotorControl_GetCurrentSpeed(0);
 8005996:	2000      	movs	r0, #0
 8005998:	f7fd fb42 	bl	8003020 <BSP_MotorControl_GetCurrentSpeed>
 800599c:	4603      	mov	r3, r0
 800599e:	807b      	strh	r3, [r7, #2]

//----- Increase acceleration while running

  /* Increase acceleration of device 0 to 480 step/s^2 */
  BSP_MotorControl_SetAcceleration(0,480);
 80059a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80059a4:	2000      	movs	r0, #0
 80059a6:	f7fd fc71 	bl	800328c <BSP_MotorControl_SetAcceleration>
  HAL_Delay(5000);
 80059aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80059ae:	f7fd ff8b 	bl	80038c8 <HAL_Delay>

  /* Increase speed of device 0 to 2400 step/s */
  BSP_MotorControl_SetMaxSpeed(0,2400);
 80059b2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80059b6:	2000      	movs	r0, #0
 80059b8:	f7fd fcfc 	bl	80033b4 <BSP_MotorControl_SetMaxSpeed>
  HAL_Delay(5000);
 80059bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80059c0:	f7fd ff82 	bl	80038c8 <HAL_Delay>

  /* Get current speed of device 0 */
  mySpeed = BSP_MotorControl_GetCurrentSpeed(0);
 80059c4:	2000      	movs	r0, #0
 80059c6:	f7fd fb2b 	bl	8003020 <BSP_MotorControl_GetCurrentSpeed>
 80059ca:	4603      	mov	r3, r0
 80059cc:	807b      	strh	r3, [r7, #2]

  if (mySpeed != 2400)
 80059ce:	887b      	ldrh	r3, [r7, #2]
 80059d0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80059d4:	d002      	beq.n	80059dc <main+0x18c>
  {
    Error_Handler(10);
 80059d6:	200a      	movs	r0, #10
 80059d8:	f000 f8ac 	bl	8005b34 <Error_Handler>
  }
//----- Increase deceleration while running

  /* Increase deceleration of device 0 to 480 step/s^2 */
  BSP_MotorControl_SetDeceleration(0,480);
 80059dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80059e0:	2000      	movs	r0, #0
 80059e2:	f7fd fc7b 	bl	80032dc <BSP_MotorControl_SetDeceleration>
  HAL_Delay(5000);
 80059e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80059ea:	f7fd ff6d 	bl	80038c8 <HAL_Delay>

  /* Decrease speed of device 0 to 1200 step/s */
  BSP_MotorControl_SetMaxSpeed(0,1200);
 80059ee:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7fd fcde 	bl	80033b4 <BSP_MotorControl_SetMaxSpeed>
  HAL_Delay(5000);
 80059f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80059fc:	f7fd ff64 	bl	80038c8 <HAL_Delay>

  /* Get current speed */
  mySpeed = BSP_MotorControl_GetCurrentSpeed(0);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7fd fb0d 	bl	8003020 <BSP_MotorControl_GetCurrentSpeed>
 8005a06:	4603      	mov	r3, r0
 8005a08:	807b      	strh	r3, [r7, #2]

//----- Soft stopped required while running

  /* Request soft stop of device 0 */
  BSP_MotorControl_SoftStop(0);
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fd fd22 	bl	8003454 <BSP_MotorControl_SoftStop>

  /* Wait for the motor of device 0 ends moving */  
  BSP_MotorControl_WaitWhileActive(0);
 8005a10:	2000      	movs	r0, #0
 8005a12:	f7fd fd63 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 8005a16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a1a:	f7fd ff55 	bl	80038c8 <HAL_Delay>

//----- Run stopped by hardstop

  /* Request device 0 to run in FORWARD direction */
  BSP_MotorControl_Run(0,FORWARD);       
 8005a1e:	2101      	movs	r1, #1
 8005a20:	2000      	movs	r0, #0
 8005a22:	f7fd fc0f 	bl	8003244 <BSP_MotorControl_Run>
  HAL_Delay(5000);
 8005a26:	f241 3088 	movw	r0, #5000	; 0x1388
 8005a2a:	f7fd ff4d 	bl	80038c8 <HAL_Delay>
  
  /* Request device 0 to immediatly stop */
  BSP_MotorControl_HardStop(0);
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7fd fbc4 	bl	80031bc <BSP_MotorControl_HardStop>
  BSP_MotorControl_WaitWhileActive(0);
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7fd fd51 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Request device 0 to disable bridge */
  BSP_MotorControl_CmdDisable(0);
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f7fd fd6e 	bl	800351c <BSP_MotorControl_CmdDisable>
  
  /* Wait for 2 seconds */
  HAL_Delay(2000);
 8005a40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a44:	f7fd ff40 	bl	80038c8 <HAL_Delay>
  
//----- GOTO stopped by softstop

 /* Request device 0 to go to position 20000  */
  BSP_MotorControl_GoTo(0,20000);  
 8005a48:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	f7fd fb93 	bl	8003178 <BSP_MotorControl_GoTo>
  HAL_Delay(5000);
 8005a52:	f241 3088 	movw	r0, #5000	; 0x1388
 8005a56:	f7fd ff37 	bl	80038c8 <HAL_Delay>

  /* Request device 0 to perform a soft stop */
  BSP_MotorControl_SoftStop(0);
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f7fd fcfa 	bl	8003454 <BSP_MotorControl_SoftStop>
  BSP_MotorControl_WaitWhileActive(0);
 8005a60:	2000      	movs	r0, #0
 8005a62:	f7fd fd3b 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Wait for 2 seconds */
  HAL_Delay(2000);  
 8005a66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a6a:	f7fd ff2d 	bl	80038c8 <HAL_Delay>
  //----- Read inexistent register to test MyFlagInterruptHandler

  /* Try to read an inexistent register */
  /* the flag interrupt should be raised */
  /* and the MyFlagInterruptHandler function called */
  BSP_MotorControl_CmdGetParam(0,0x1F);
 8005a6e:	211f      	movs	r1, #31
 8005a70:	2000      	movs	r0, #0
 8005a72:	f7fd fd73 	bl	800355c <BSP_MotorControl_CmdGetParam>
  HAL_Delay(500);
 8005a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a7a:	f7fd ff25 	bl	80038c8 <HAL_Delay>

//----- Change step mode to full step mode

  /* Select full step mode for device 0 */
   BSP_MotorControl_SelectStepMode(0,STEP_MODE_FULL);
 8005a7e:	2100      	movs	r1, #0
 8005a80:	2000      	movs	r0, #0
 8005a82:	f7fd fdb9 	bl	80035f8 <BSP_MotorControl_SelectStepMode>

  /* Set speed and acceleration to be consistent with full step mode */
   BSP_MotorControl_SetMaxSpeed(0,100);
 8005a86:	2164      	movs	r1, #100	; 0x64
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f7fd fc93 	bl	80033b4 <BSP_MotorControl_SetMaxSpeed>
   BSP_MotorControl_SetMinSpeed(0,50);
 8005a8e:	2132      	movs	r1, #50	; 0x32
 8005a90:	2000      	movs	r0, #0
 8005a92:	f7fd fcb7 	bl	8003404 <BSP_MotorControl_SetMinSpeed>
   BSP_MotorControl_SetAcceleration(0,10);
 8005a96:	210a      	movs	r1, #10
 8005a98:	2000      	movs	r0, #0
 8005a9a:	f7fd fbf7 	bl	800328c <BSP_MotorControl_SetAcceleration>
   BSP_MotorControl_SetDeceleration(0,10);
 8005a9e:	210a      	movs	r1, #10
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7fd fc1b 	bl	80032dc <BSP_MotorControl_SetDeceleration>

  /* Request device 0 to go position 200 */
   BSP_MotorControl_GoTo(0,200);  
 8005aa6:	21c8      	movs	r1, #200	; 0xc8
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f7fd fb65 	bl	8003178 <BSP_MotorControl_GoTo>

  /* Wait for the motor of device 0 ends moving */
   BSP_MotorControl_WaitWhileActive(0);
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f7fd fd14 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

  /* Get current position */
  pos =  BSP_MotorControl_GetPosition(0);
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fd fafb 	bl	80030b0 <BSP_MotorControl_GetPosition>
 8005aba:	6078      	str	r0, [r7, #4]

  /* Wait for 2 seconds */
  HAL_Delay(2000);
 8005abc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ac0:	f7fd ff02 	bl	80038c8 <HAL_Delay>
  
//----- Restore 1/16 microstepping mode

  /* Reset device 0 to 1/16 microstepping mode */
  BSP_MotorControl_SelectStepMode(0,STEP_MODE_1_16);    
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	f7fd fd96 	bl	80035f8 <BSP_MotorControl_SelectStepMode>

  /* Update speed, acceleration, deceleration for 1/16 microstepping mode*/
  BSP_MotorControl_SetMaxSpeed(0,1600);
 8005acc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f7fd fc6f 	bl	80033b4 <BSP_MotorControl_SetMaxSpeed>
  BSP_MotorControl_SetMinSpeed(0,800);
 8005ad6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7fd fc92 	bl	8003404 <BSP_MotorControl_SetMinSpeed>
  BSP_MotorControl_SetAcceleration(0,160);
 8005ae0:	21a0      	movs	r1, #160	; 0xa0
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f7fd fbd2 	bl	800328c <BSP_MotorControl_SetAcceleration>
  BSP_MotorControl_SetDeceleration(0,160);  
 8005ae8:	21a0      	movs	r1, #160	; 0xa0
 8005aea:	2000      	movs	r0, #0
 8005aec:	f7fd fbf6 	bl	80032dc <BSP_MotorControl_SetDeceleration>
  
  /* Infinite loop */
  while(1)
  {
    /* Request device 0 to go position -6400 */
    BSP_MotorControl_GoTo(0,-6400);
 8005af0:	4909      	ldr	r1, [pc, #36]	; (8005b18 <main+0x2c8>)
 8005af2:	2000      	movs	r0, #0
 8005af4:	f7fd fb40 	bl	8003178 <BSP_MotorControl_GoTo>

    /* Wait for the motor of device 0 ends moving */
    BSP_MotorControl_WaitWhileActive(0);
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7fd fcef 	bl	80034dc <BSP_MotorControl_WaitWhileActive>

    /* Request device 0 to go position 6400 */
    BSP_MotorControl_GoTo(0,6400);
 8005afe:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8005b02:	2000      	movs	r0, #0
 8005b04:	f7fd fb38 	bl	8003178 <BSP_MotorControl_GoTo>

    /* Wait for the motor of device 0 ends moving */
    BSP_MotorControl_WaitWhileActive(0);  
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f7fd fce7 	bl	80034dc <BSP_MotorControl_WaitWhileActive>
    BSP_MotorControl_GoTo(0,-6400);
 8005b0e:	e7ef      	b.n	8005af0 <main+0x2a0>
 8005b10:	08005b1d 	.word	0x08005b1d
 8005b14:	08005b35 	.word	0x08005b35
 8005b18:	ffffe700 	.word	0xffffe700

08005b1c <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7fd fd42 	bl	80035ac <BSP_MotorControl_CmdGetStatus>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection 
    // Action to be customized          
  }      
 
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  error number of the error
  * @retval None
  */
void Error_Handler(uint16_t error)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	80fb      	strh	r3, [r7, #6]
  /* Backup error number */
  gLastError = error;
 8005b3e:	4a02      	ldr	r2, [pc, #8]	; (8005b48 <Error_Handler+0x14>)
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	8013      	strh	r3, [r2, #0]
  
  /* Infinite loop */
  while(1)
 8005b44:	e7fe      	b.n	8005b44 <Error_Handler+0x10>
 8005b46:	bf00      	nop
 8005b48:	2000020a 	.word	0x2000020a

08005b4c <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param[in] hspi SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08c      	sub	sp, #48	; 0x30
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hspi->Instance == SPIx)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a31      	ldr	r2, [pc, #196]	; (8005c20 <HAL_SPI_MspInit+0xd4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d15b      	bne.n	8005c16 <HAL_SPI_MspInit+0xca>
  {  
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	4b30      	ldr	r3, [pc, #192]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	4a2f      	ldr	r2, [pc, #188]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6e:	4b2d      	ldr	r3, [pc, #180]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_SPI_MspInit+0xd8>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8005bce:	2320      	movs	r3, #32
 8005bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_MEDIUM;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8005bde:	2305      	movs	r3, #5
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005be2:	f107 031c 	add.w	r3, r7, #28
 8005be6:	4619      	mov	r1, r3
 8005be8:	480f      	ldr	r0, [pc, #60]	; (8005c28 <HAL_SPI_MspInit+0xdc>)
 8005bea:	f7fd ff9f 	bl	8003b2c <HAL_GPIO_Init>
      
    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8005bee:	2340      	movs	r3, #64	; 0x40
 8005bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8005bf2:	2305      	movs	r3, #5
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005bf6:	f107 031c 	add.w	r3, r7, #28
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	480a      	ldr	r0, [pc, #40]	; (8005c28 <HAL_SPI_MspInit+0xdc>)
 8005bfe:	f7fd ff95 	bl	8003b2c <HAL_GPIO_Init>
    
    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8005c06:	2305      	movs	r3, #5
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);   
 8005c0a:	f107 031c 	add.w	r3, r7, #28
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4805      	ldr	r0, [pc, #20]	; (8005c28 <HAL_SPI_MspInit+0xdc>)
 8005c12:	f7fd ff8b 	bl	8003b2c <HAL_GPIO_Init>
  }
}
 8005c16:	bf00      	nop
 8005c18:	3730      	adds	r7, #48	; 0x30
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40013000 	.word	0x40013000
 8005c24:	40023800 	.word	0x40023800
 8005c28:	40020000 	.word	0x40020000

08005c2c <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a41      	ldr	r2, [pc, #260]	; (8005d40 <HAL_TIM_PWM_MspInit+0x114>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d126      	bne.n	8005c8c <HAL_TIM_PWM_MspInit+0x60>
  {
    /* Peripheral clock enable */
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1_CLCK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	4b40      	ldr	r3, [pc, #256]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	4a3f      	ldr	r2, [pc, #252]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4e:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
  
    /* GPIO configuration */
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN;
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005c66:	2300      	movs	r3, #0
 8005c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, &GPIO_InitStruct);
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	4619      	mov	r1, r3
 8005c74:	4834      	ldr	r0, [pc, #208]	; (8005d48 <HAL_TIM_PWM_MspInit+0x11c>)
 8005c76:	f7fd ff59 	bl	8003b2c <HAL_GPIO_Init>

    /* Set Interrupt Group Priority of Timer Interrupt*/ 
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn, 4, 0);
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	201d      	movs	r0, #29
 8005c80:	f7fd ff1d 	bl	8003abe <HAL_NVIC_SetPriority>
    
    /* Enable the timer global Interrupt */
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn);  
 8005c84:	201d      	movs	r0, #29
 8005c86:	f7fd ff36 	bl	8003af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn, 3, 0);
    
    /* Enable the timer global Interrupt */
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn);  
  }
}
 8005c8a:	e055      	b.n	8005d38 <HAL_TIM_PWM_MspInit+0x10c>
  else if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c94:	d126      	bne.n	8005ce4 <HAL_TIM_PWM_MspInit+0xb8>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2_CLCK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	4b2a      	ldr	r3, [pc, #168]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_2_PIN;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_2_PORT, &GPIO_InitStruct);
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	4619      	mov	r1, r3
 8005ccc:	481f      	ldr	r0, [pc, #124]	; (8005d4c <HAL_TIM_PWM_MspInit+0x120>)
 8005cce:	f7fd ff2d 	bl	8003b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM2_IRQn, 4, 0);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2104      	movs	r1, #4
 8005cd6:	201c      	movs	r0, #28
 8005cd8:	f7fd fef1 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM2_IRQn);    
 8005cdc:	201c      	movs	r0, #28
 8005cde:	f7fd ff0a 	bl	8003af6 <HAL_NVIC_EnableIRQ>
}
 8005ce2:	e029      	b.n	8005d38 <HAL_TIM_PWM_MspInit+0x10c>
  else if(htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_TIM_PWM_MspInit+0x124>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d124      	bne.n	8005d38 <HAL_TIM_PWM_MspInit+0x10c>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3_CLCK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005cf8:	f043 0304 	orr.w	r3, r3, #4
 8005cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfe:	4b11      	ldr	r3, [pc, #68]	; (8005d44 <HAL_TIM_PWM_MspInit+0x118>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_3_PIN;
 8005d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_3_PORT, &GPIO_InitStruct);    
 8005d1c:	f107 0314 	add.w	r3, r7, #20
 8005d20:	4619      	mov	r1, r3
 8005d22:	480a      	ldr	r0, [pc, #40]	; (8005d4c <HAL_TIM_PWM_MspInit+0x120>)
 8005d24:	f7fd ff02 	bl	8003b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn, 3, 0);
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2103      	movs	r1, #3
 8005d2c:	201e      	movs	r0, #30
 8005d2e:	f7fd fec6 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM3_IRQn);  
 8005d32:	201e      	movs	r0, #30
 8005d34:	f7fd fedf 	bl	8003af6 <HAL_NVIC_EnableIRQ>
}
 8005d38:	bf00      	nop
 8005d3a:	3728      	adds	r7, #40	; 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40020800 	.word	0x40020800
 8005d4c:	40020400 	.word	0x40020400
 8005d50:	40000800 	.word	0x40000800

08005d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief PWM Callback
  * @param[in] htim PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a22      	ldr	r2, [pc, #136]	; (8005dec <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10c      	bne.n	8005d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7e1b      	ldrb	r3, [r3, #24]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d108      	bne.n	8005d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
  {
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f7fd f97a 	bl	8003068 <BSP_MotorControl_GetDeviceState>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d002      	beq.n	8005d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
    {
      BSP_MotorControl_StepClockHandler(0);
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f7fd fb8e 	bl	800349c <BSP_MotorControl_StepClockHandler>
    }
  }
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d10c      	bne.n	8005da4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7e1b      	ldrb	r3, [r3, #24]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d108      	bne.n	8005da4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
  {
    if (BSP_MotorControl_GetDeviceState(1) != INACTIVE)
 8005d92:	2001      	movs	r0, #1
 8005d94:	f7fd f968 	bl	8003068 <BSP_MotorControl_GetDeviceState>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d002      	beq.n	8005da4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
    { 
      BSP_MotorControl_StepClockHandler(1);
 8005d9e:	2001      	movs	r0, #1
 8005da0:	f7fd fb7c 	bl	800349c <BSP_MotorControl_StepClockHandler>
    }
  }
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM3))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d119      	bne.n	8005de2 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7e1b      	ldrb	r3, [r3, #24]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d115      	bne.n	8005de2 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
  {
    HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_3_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_3_PIN);
 8005db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dba:	480e      	ldr	r0, [pc, #56]	; (8005df4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005dbc:	f7fe f86b 	bl	8003e96 <HAL_GPIO_TogglePin>
    if ((BSP_MotorControl_GetDeviceState(2) != INACTIVE)&& 
 8005dc0:	2002      	movs	r0, #2
 8005dc2:	f7fd f951 	bl	8003068 <BSP_MotorControl_GetDeviceState>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d00a      	beq.n	8005de2 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
        (HAL_GPIO_ReadPin(BSP_MOTOR_CONTROL_BOARD_PWM_3_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_3_PIN) == GPIO_PIN_SET))
 8005dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dd0:	4808      	ldr	r0, [pc, #32]	; (8005df4 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8005dd2:	f7fe f82f 	bl	8003e34 <HAL_GPIO_ReadPin>
 8005dd6:	4603      	mov	r3, r0
    if ((BSP_MotorControl_GetDeviceState(2) != INACTIVE)&& 
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d102      	bne.n	8005de2 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
    {
      BSP_MotorControl_StepClockHandler(2);
 8005ddc:	2002      	movs	r0, #2
 8005dde:	f7fd fb5d 	bl	800349c <BSP_MotorControl_StepClockHandler>
    }
  }
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40020400 	.word	0x40020400

08005df8 <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d101      	bne.n	8005e0e <HAL_GPIO_EXTI_Callback+0x16>
  {
    BSP_MotorControl_FlagInterruptHandler();
 8005e0a:	f7fd f8ef 	bl	8002fec <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
}
 8005e1a:	bf00      	nop
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005e28:	e7fe      	b.n	8005e28 <HardFault_Handler+0x4>

08005e2a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005e2e:	e7fe      	b.n	8005e2e <MemManage_Handler+0x4>

08005e30 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005e34:	e7fe      	b.n	8005e34 <BusFault_Handler+0x4>

08005e36 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005e36:	b480      	push	{r7}
 8005e38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005e3a:	e7fe      	b.n	8005e3a <UsageFault_Handler+0x4>

08005e3c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
}
 8005e40:	bf00      	nop
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	af00      	add	r7, sp, #0
}
 8005e4e:	bf00      	nop
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8005e6a:	f7fd fd0d 	bl	8003888 <HAL_IncTick>
}
 8005e6e:	bf00      	nop
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005e76:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005e7a:	f7fe f81f 	bl	8003ebc <HAL_GPIO_EXTI_IRQHandler>
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm2);
 8005e88:	4802      	ldr	r0, [pc, #8]	; (8005e94 <TIM2_IRQHandler+0x10>)
 8005e8a:	f7fe fff3 	bl	8004e74 <HAL_TIM_IRQHandler>
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000304 	.word	0x20000304

08005e98 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm1);
 8005e9c:	4802      	ldr	r0, [pc, #8]	; (8005ea8 <TIM3_IRQHandler+0x10>)
 8005e9e:	f7fe ffe9 	bl	8004e74 <HAL_TIM_IRQHandler>
}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	2000028c 	.word	0x2000028c

08005eac <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm3);
 8005eb0:	4802      	ldr	r0, [pc, #8]	; (8005ebc <TIM4_IRQHandler+0x10>)
 8005eb2:	f7fe ffdf 	bl	8004e74 <HAL_TIM_IRQHandler>
}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200002c8 	.word	0x200002c8

08005ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ec6:	e003      	b.n	8005ed0 <LoopCopyDataInit>

08005ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005ece:	3104      	adds	r1, #4

08005ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ed0:	480b      	ldr	r0, [pc, #44]	; (8005f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ed8:	d3f6      	bcc.n	8005ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8005eda:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005edc:	e002      	b.n	8005ee4 <LoopFillZerobss>

08005ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ee0:	f842 3b04 	str.w	r3, [r2], #4

08005ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ee8:	d3f9      	bcc.n	8005ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005eea:	f7fd fc3d 	bl	8003768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005eee:	f000 f811 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ef2:	f7ff fcad 	bl	8005850 <main>
  bx  lr    
 8005ef6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ef8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8005efc:	08005f9c 	.word	0x08005f9c
  ldr  r0, =_sdata
 8005f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f04:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 8005f08:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 8005f0c:	20000344 	.word	0x20000344

08005f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f10:	e7fe      	b.n	8005f10 <ADC_IRQHandler>
	...

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4d0d      	ldr	r5, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1b64      	subs	r4, r4, r5
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2600      	movs	r6, #0
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4d0b      	ldr	r5, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 f818 	bl	8005f5c <_init>
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2600      	movs	r6, #0
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	08005f94 	.word	0x08005f94
 8005f50:	08005f94 	.word	0x08005f94
 8005f54:	08005f94 	.word	0x08005f94
 8005f58:	08005f98 	.word	0x08005f98

08005f5c <_init>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr

08005f68 <_fini>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr
